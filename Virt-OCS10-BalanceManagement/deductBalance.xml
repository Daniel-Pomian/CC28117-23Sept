<?xml version="1.0" encoding="UTF-8"?>
<con:mockOperation name="deductBalance" id="368fd320-13c7-4f94-9c39-13d040c6cfde" interface="BalanceManagement-SOAPBinding" operation="deductBalance" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="e804aa3e-9501-44e8-8b24-ac2bfaa10811fileName">deductBalance</con:setting>
    <con:setting id="368fd320-13c7-4f94-9c39-13d040c6cfdefileName">deductBalance</con:setting>
  </con:settings>
  <con:defaultResponse>Response-Default</con:defaultResponse>
  <con:dispatchStyle>SCRIPT</con:dispatchStyle>
  <con:dispatchConfig/>
  <con:dispatchPath><![CDATA[/*
 * This script read values from request, count balance difference and set in virt properties for response 
 * Date: 15.03.2016, Changed at 03.10.16 and at 11.04.19
 * Autor: Michael Gordon
*/

 // read default values from project properties
 def sMSISDNPrefixException = context.expand( '${#Project#MOCK-Prefix-OCS10-deductBalance-CustomException}' )
 def sMSISDNUnknown = context.expand( '${#Project#MSISDN_OCS_Unknown}') 
 
 // from virt properties
 def iDEFAULTBalance = context.expand( '${#MockService#DEFAULT-balance}' ).toInteger() 
 def sErrorType_Default = context.expand( '${#MockService#DEFAULT-ErrorType}')
 def sErrorCode_Default=context.expand( '${#MockService#DEFAULT-ErrorCode}')
 def sErrorText_Default = context.expand( '${#MockService#DEFAULT-ErrorText}')

 // set virt properties for soap fault responses  
 context.mockService.setPropertyValue('Exception-ErrorType',sErrorType_Default)
 context.mockService.setPropertyValue('Exception-ErrorCode',sErrorCode_Default)
 context.mockService.setPropertyValue('Exception-ErrorText',sErrorText_Default)

 // read values from incommning request
 def holder = new com.eviware.soapui.support.XmlHolder( mockRequest.requestContent ) 
 def sHeaderMsgId=holder.getNodeValue("declare namespace ns1='http://schemas.xmlsoap.org/ws/2004/08/addressing';//ns1:MessageID[1]")
 def sApplicationID=holder.getNodeValue("declare namespace ns1='http://www.telefonica.com/OCS/To2DE/OCS_types/v1_1'; //ns1:deductBalanceRequest[1]/ns1:appInfo[1]/ns1:applicationId[1]")
 def sReference=holder.getNodeValue("declare namespace ns1='http://www.telefonica.com/OCS/To2DE/OCS_types/v1_1'; //ns1:deductBalanceRequest[1]/ns1:appInfo[1]/ns1:reference[1]") 
 def sMSISDN = holder.getNodeValue("declare namespace ns1='http://www.telefonica.com/OCS/To2DE/OCS_types/v1_1'; //ns1:deductBalanceRequest[1]/ns1:subscriberId[1]//ns1:e164Number[1]")
 def sWalledID=holder.getNodeValue("declare namespace ns1='http://www.telefonica.com/OCS/To2DE/OCS_types/v1_1'; //ns1:deductBalanceRequest[1]/ns1:walletId[1]")
 def sAmount=holder.getNodeValue("declare namespace ns1='http://www.telefonica.com/OCS/To2DE/OCS_types/v1_1'; //ns1:deductBalanceRequest[1]/ns1:amount[1]")
 def sFlag=holder.getNodeValue("declare namespace ns1='http://www.telefonica.com/OCS/To2DE/OCS_types/v1_1'; //ns1:deductBalanceRequest[1]/ns1:allOrNothingFlag[1]")

 // log data from request in groovy-output from mock-gui for validations
 log.info('OCS10-BalanceManagement.deductBalance: Return response for request with msisdn ' + sMSISDN)
 log.info('MessageID is: ' + sHeaderMsgId) 	 
 log.info('applicationId is: ' + sApplicationID)
 log.info('reference is: ' + sReference)
 log.info('amount is: ' + sAmount)
 log.info('all or nothing flag is: ' + sFlag)

  // check msissdn
 if(sMSISDN==null || sMSISDN.length()<1 || sMSISDN.length()>15 || !sMSISDN.toString().isNumber() ){
	context.mockService.setPropertyValue('Exception-ErrorCode','5')
 	context.mockService.setPropertyValue('Exception-ErrorText','Incoherent parameters: MSISDN is missed, to short, to long or contains not allowed signs')
	return 'Response-soapFault-ServiceException'
 }
 
 // if msisd=constant msisdn unknown, return permanent errorcode=1, it is default code
 if (sMSISDN.toString()==sMSISDNUnknown.toString()){
 	context.mockService.setPropertyValue('Exception-ErrorCode','1')
 	context.mockService.setPropertyValue('Exception-ErrorText','Unknown subscriberId')
 	return 'Response-soapFault-ServiceException'
 }

// check input parameters from request
String sResultCode='5'
String sResultDesc='Incoherent parameters:-'
def lstMediaType = ['23','25','27','28','35','38','39','40','43','44','60','61','70','71']
def lstTopup=['M0','M1','M2','M3','M4','M5','M6','M7','M8','M9','MA','MB']
// check: MessageId in soapHeader. Must be uuid and 36 signs long
if (sHeaderMsgId==null || sHeaderMsgId.length()<1 ||
	sHeaderMsgId.replace('urn:uuid:','').length()!=36)
	sResultDesc=sResultDesc + 'MessageID in soapHeader is missed or not uuid!'
// check applicationId. Must be D+mediaType. Ex. D35
else if (sApplicationID==null ||  sApplicationID.length()!=3 || 
	!lstMediaType.contains(sApplicationID[1..2]) || sApplicationID[0]!='D')
	sResultDesc=sResultDesc + 'applicationId in request is emtpy or contains not allowed value! Must be D + media type'
// check reference. Started with mediaType. Ex. 350000010006278
else if (sReference==null ||  sReference.length()<9 ||  sReference.length()>64 ||
	!lstMediaType.contains(sReference[0..1]))
	sResultDesc=sResultDesc + 'reference in request is emtpy, not 9 till 64 signs long or does not contain media type!'
// check walletId=balanceID=2
else if (sWalledID==null || sWalledID!='2')
	sResultDesc=sResultDesc + 'walletId in request contains wrong value. Allowed only 2!'
// Two last signs in applicationId must be = first two signs in reference and in rechargeType
else if (sApplicationID[1..2]!=sReference[0..1])
	sResultDesc=sResultDesc + 'Media type in applicationId and reference from request is not identical!'
else	// all values in request are valid, clear error description.
	sResultDesc=''

// if error description is not empty, send error response with error-message
if(sResultDesc!=''){
	context.mockService.setPropertyValue('Exception-ErrorCode',sResultCode)
	context.mockService.setPropertyValue('Exception-ErrorText',sResultDesc)
	return 'Response-soapFault-ServiceException'  
}
 
  
 // convert balance change to integer
 def iBalanceChange=sAmount.toInteger()
 def iBalanceDelta=iDEFAULTBalance-iBalanceChange
 // set request values to virt properties
 context.mockService.setPropertyValue('deductBalance-applicationId',sApplicationID)
 context.mockService.setPropertyValue('deductBalance-reference',sReference)
 context.mockService.setPropertyValue('deductBalance-e164Number',sMSISDN)
 context.mockService.setPropertyValue('deductBalance-walletId',sWalledID)
 context.mockService.setPropertyValue('deductBalance-balanceChange',sAmount)
 // set balance to default balance - change balance
 context.mockService.setPropertyValue('deductBalance-balance',iBalanceDelta.toString())

 // make sure, soap fault response is not ordered  and balance delta >=0
 if ((sMSISDN.length()<14 || sMSISDN[0..4]!=sMSISDNPrefixException) && (iBalanceDelta>=0)){
	 return 'Response-Default'
 }

 // create ordered soap fault exception 
 if ( sMSISDN[0..4]==sMSISDNPrefixException){
 	context.mockService.setPropertyValue('Exception-ErrorCode',sMSISDN.substring(6).toInteger().toString())
	switch ( sMSISDN[5] ) {
    		case '1':		// service exception, permanent    		
         		return 'Response-soapFault-ServiceException' 
    		case '2':		// service exception, transient   
    			context.mockService.setPropertyValue('Exception-ErrorType','TRANSIENT')        	
          	return 'Response-soapFault-ServiceException' 
    		case '3':		// policy exception, transient        	
        		return 'Response-soapFault-PolicyException'   
    		default:
    			context.mockService.setPropertyValue('Exception-ErrorCode',sErrorCode_Default)
        		return 'Response-soapFault-ServiceException' 
 	} 	
 }

 if (iBalanceDelta<0){
 	if (sFlag=='true') {
	 	// decrement is not possible, service exception with error 4000009  - Insufficient balance
 		context.mockService.setPropertyValue('Exception-ErrorCode','4000009')
		return 'Response-soapFault-ServiceException'
 	}
 	else {
	 	// set only possible max changed amount, all rest balances are 0 
 		context.mockService.setPropertyValue('deductBalance-balanceChange',iDEFAULTBalance.toString()) 		
 		context.mockService.setPropertyValue('deductBalance-balance','0')
		return 'Response-Default'
 	} 	
 }]]></con:dispatchPath>
  <con:dispatchXPath/>
  <con:routeScript/>
  <con:response name="Response-Default" id="08cd8a40-3929-401a-b271-418ed4938512" httpResponseStatus="200" encoding="UTF-8" dataSource="">
    <con:settings/>
    <con:responseContent><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:add="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:v1="http://www.telefonica.com/OCS/To2DE/OCS_types/v1_1">
   <soapenv:Header>
      <add:MessageID>http://www.test.com/ac/feta</add:MessageID>
   </soapenv:Header>
   <soapenv:Body>
      <v1:deductBalanceResponse>
         <v1:appInfo>
            <!--type: ApplicationIdType-->
            <v1:applicationId>${#MockService#deductBalance-applicationId}</v1:applicationId>
            <!--type: ErReferenceType-->
            <v1:reference>${#MockService#deductBalance-reference}</v1:reference>
         </v1:appInfo>
         <v1:result>
            <!--type: OpReferenceType-->
            <v1:opReference>${#Project#GUID_Moved-}</v1:opReference>
            <!--type: dateTime-->
            <v1:opExecutionDate>${#Project#DateTime_Current_Offset}</v1:opExecutionDate>
            <v1:opCost exponent="${#MockService#DEFAULT-exponent}" currencyCode="${#MockService#DEFAULT-currencyCode}">${#MockService#DEFAULT-opCost}</v1:opCost>
            <v1:subscriberId>
               <!--You have a CHOICE of the next 4 items at this level-->
               <!--type: E164NumberType-->
               <v1:e164Number>${#MockService#deductBalance-e164Number}</v1:e164Number>
            </v1:subscriberId>
            <!--type: string-->
            <v1:serviceProviderId>${#MockService#DEFAULT-serviceProviderId}</v1:serviceProviderId>
            <v1:balance exponent="${#MockService#DEFAULT-exponent}" currencyCode="${#MockService#DEFAULT-currencyCode}">${#MockService#deductBalance-balance}</v1:balance>
            <v1:lifeCycleStatus>
               <!--type: LifeCycleStateType - enumeration: [A,I,L,P,T,W,X]-->
               <v1:state>A</v1:state>
               <!--type: LifeCycleSubStateType-->
               <v1:subState>A</v1:subState>
            </v1:lifeCycleStatus>
            <!--type: TariffPlanIdType-->
            <v1:tariffPlanId>${#MockService#DEFAULT-tariffPlanId}</v1:tariffPlanId>
         </v1:result>
         <v1:changedWalletInfo>
            <!--type: WalletIdType-->
            <v1:walletId>${#MockService#deductBalance-walletId}</v1:walletId>
            <v1:balance exponent="${#MockService#DEFAULT-exponent}" currencyCode="${#MockService#DEFAULT-currencyCode}">${#MockService#deductBalance-balance}</v1:balance>
            <v1:balanceChange exponent="${#MockService#DEFAULT-exponent}" currencyCode="${#MockService#DEFAULT-currencyCode}">${#MockService#deductBalance-balanceChange}</v1:balanceChange>
            <!--type: dateTime-->
            <v1:expirationDate>${#Project#Date_Future_Offset}</v1:expirationDate>
         </v1:changedWalletInfo>
      </v1:deductBalanceResponse>
   </soapenv:Body>
</soapenv:Envelope>]]></con:responseContent>
    <con:wsaConfig mustUnderstand="NONE" version="200508" action="deductBalance"/>
  </con:response>
  <con:response name="Response-soapFault-ServiceException" id="a1afee22-e904-40d6-b501-9009697f1b43" httpResponseStatus="500" encoding="UTF-8" dataSource="">
    <con:settings/>
    <con:responseContent><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soap:Body>
      <soap:Fault>
         <faultcode>soap:Server</faultcode>
         <faultstring>${#MockService#faultString}</faultstring>
         <detail>
            <ns3:serviceException xmlns="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:ns2="http://www.w3.org/2000/09/xmldsig#" xmlns:ns3="http://www.telefonica.com/OCS/To2DE/OCS_types/v1_1" xmlns:ns4="http://schemas.xmlsoap.org/ws/2002/04/secext">
               <ns3:errorCode>${#MockService#Exception-ErrorCode}</ns3:errorCode>
               <ns3:errorType>${#MockService#Exception-ErrorType}</ns3:errorType>
               <ns3:text>${#MockService#Exception-ErrorText}</ns3:text>
            </ns3:serviceException>
         </detail>
      </soap:Fault>
   </soap:Body>
</soap:Envelope>]]></con:responseContent>
    <con:wsaConfig mustUnderstand="NONE" version="200508" action="deductBalance"/>
  </con:response>
  <con:response name="Response-soapFault-PolicyException" id="9cfa5a55-946f-44fe-adcd-653ca00be42c" httpResponseStatus="500" encoding="UTF-8" dataSource="">
    <con:settings/>
    <con:responseContent><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soap:Body>
      <soap:Fault>
         <faultcode>soap:Server</faultcode>
         <faultstring>${#MockService#faultString}</faultstring>
         <detail>
            <ns4:policyException xmlns="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:ns2="http://www.w3.org/2000/09/xmldsig#" xmlns:ns3="http://schemas.xmlsoap.org/ws/2002/04/secext" xmlns:ns4="http://www.telefonica.com/OCS/To2DE/OCS_types/v1_1">
               <ns4:errorCode>${#MockService#Exception-ErrorCode}</ns4:errorCode>
               <ns4:errorType>${#MockService#DEFAULT-ErrorType}</ns4:errorType>
               <ns4:text>${#MockService#Exception-ErrorText}</ns4:text>
               <ns4:variables>topUpAccount_POL_1</ns4:variables>
            </ns4:policyException>
         </detail>
      </soap:Fault>
   </soap:Body>
</soap:Envelope>]]></con:responseContent>
    <con:wsaConfig mustUnderstand="NONE" version="200508" action="deductBalance"/>
  </con:response>
</con:mockOperation>
