<?xml version="1.0" encoding="UTF-8"?>
<con:mockOperation name="prepareClawback" id="3e82970f-7958-45d1-9913-ae0c87869417" interface="PrepaidITCustomerCareServices-SOAPBinding" operation="prepareClawback" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="3e82970f-7958-45d1-9913-ae0c87869417fileName">prepareClawback</con:setting>
  </con:settings>
  <con:defaultResponse>Response-Default</con:defaultResponse>
  <con:dispatchStyle>SCRIPT</con:dispatchStyle>
  <con:dispatchConfig/>
  <con:dispatchPath><![CDATA[/*
 * This script read values from request and set in virt properties for response 
 * For defined msisdn prefixes return mock response with error codes or soapfault
 * Date: 19.05.2016
 * Autor: Michael Gordon
*/

 String sDocumentation='''
 Documentation for using PPIT mock service.
	
 Mock service despatch default response with values from request and default values from mock service like current response below.

 To order custom response with expected values or soapFault exception, externalContractId in request must be in format:

 - Prefix must be:
	( '${#Project#MOCK-Prefix-PPIT-CustomCareService-CustomResponse}' )

 - Next position 3
	0 - for positive error code
	1 - for negative error code
	
 - Next position 4:
	1 - for response with error code from externalContractId in Request
	2 - for soapFault exception with error code like above
		
 - Next three positions 5-7
	- three signs error code to be delivered in response
	
 - Rest positions:
	- any digits
	
 Ex. MSISDN = ( '${#Project#MOCK-Prefix-PPIT-CustomCareService-CustomResponse}' )01471012345678

 Example soap fault response for MSISDN above: 
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prep="http://version15.prepaid.de.telefonica.com/prepaiditcustomercareservicetypes">
   <soapenv:Header/>
   <soapenv:Body>
      <prep:NotifyAboutBankTransactionResult>
         <prep:serviceResponse>
            <prep:brandID>1</prep:brandID>
            <prep:tenantID>1</prep:tenantID>
            <prep:transactionID>a4adaeeb-697d-49c6-a513-b95a0df39db8</prep:transactionID>
            <prep:callingDateTime>2016-05-23T15:22:05+02:00</prep:callingDateTime>
            <prep:success>true</prep:success>
            <prep:frontendID>DRC</prep:frontendID>
         </prep:serviceResponse>
         <prep:resultCode>471</prep:resultCode>
         <prep:reasonMsg>Request not successful</prep:reasonMsg>
      </prep:NotifyAboutBankTransactionResult>
   </soapenv:Body>
</soapenv:Envelope>

 End of documentation  
'''

 // Set documentation in virt property. This documentation will be returned in default responses from all virt services and must describe behavior of all services.
 context.mockService.setPropertyValue('Doc', sDocumentation)

 def contractIDPrefix = context.expand( '${#Project#MOCK-Prefix-PPIT-CustomCareService-CustomResponse}' )

 // copy default values to current values in mock- properties
 def success = context.expand( '${#MockService#DEFAULT-success}' )
 def resultCode = context.expand( '${#MockService#DEFAULT-resultCode}' )
 def reasonMsg = context.expand( '${#MockService#DEFAULT-reasonMsg}' )

 context.mockService.setPropertyValue('success',success)
 context.mockService.setPropertyValue('resultCode',resultCode)
 context.mockService.setPropertyValue('reasonMsg',reasonMsg)
 
 // read values from incommning request and set for response
 def holder = new com.eviware.soapui.support.XmlHolder( mockRequest.requestContent)
 def brandID = holder.getNodeValue("declare namespace prep='http://version15.prepaid.de.telefonica.com/prepaiditcustomercareservicetypes'; //prep:brandID")
 def tenantID = holder.getNodeValue("declare namespace prep='http://version15.prepaid.de.telefonica.com/prepaiditcustomercareservicetypes'; //prep:tenantID")
 def transactID = holder.getNodeValue("declare namespace prep='http://version15.prepaid.de.telefonica.com/prepaiditcustomercareservicetypes'; //prep:transactionID")
 def contractID = holder.getNodeValue("declare namespace prep='http://version15.prepaid.de.telefonica.com/prepaiditcustomercareservicetypes'; //prep:externalContractId")
 
 context.mockService.setPropertyValue('brandID',brandID)
 context.mockService.setPropertyValue('tenantID',tenantID)
 context.mockService.setPropertyValue('transactID', transactID )
 
 log.info('PPIT-CustomerCaseServices: Return response for request with externalContractID: - ' + contractID)
 
  // check contract id and return soapFault, if contractID wrong
 if(contractID==null || contractID.length()<1 || contractID.length()>15){
	context.mockService.setPropertyValue('resultCode','-2')
 	context.mockService.setPropertyValue('reasonMsg','Wrong externalContranctID in Request. Must be string with length 1-15 signs.')
	return 'Response-soapFault'
 }

 // if no custom response ordered, return default response
 if (contractID.length()<8 || contractID[0..1]!=contractIDPrefix ){
	 return 'Response-Default'
 }
 
 if (!(contractID[2]=='0' || contractID[2]=='1') || !(contractID[3]=='1' || contractID[3]=='2') ){
 	return 'Response-Default'
 }
 
 
 // create custom response with error code
 // set error code and error message
 def iErrCode=contractID[4..6].toInteger()
 // log.info('Error code from contractID is '+iErrCode)
 context.mockService.setPropertyValue('reasonMsg','Error with error code')
 
 // set positive or negative error code
 if (contractID[2]=='1'){
	iErrCode=-iErrCode
 }
 context.mockService.setPropertyValue('resultCode',iErrCode.toString())

 if(contractID[3]=='2'){
 	return 'Response-soapFault'
 }
 return 'Response-Default']]></con:dispatchPath>
  <con:dispatchXPath/>
  <con:routeScript/>
  <con:response name="Response-Default" id="566f9a53-8471-44c6-bf86-383c6104005f" httpResponseStatus="200" encoding="UTF-8" dataSource="">
    <con:settings/>
    <con:responseContent><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prep="http://version15.prepaid.de.telefonica.com/prepaiditcustomercareservicetypes">
   <soapenv:Header/>
   <soapenv:Body>
      <prep:PrepareClawbackResult>
         <prep:serviceResponse>
            <prep:brandID>${#MockService#brandID}</prep:brandID>
            <prep:tenantID>${#MockService#tenantID}</prep:tenantID>
            <prep:transactionID>${#MockService#transactID}</prep:transactionID>
            <prep:callingDateTime>${#Project#DateTime_Current_Offset}</prep:callingDateTime>
            <prep:success>${#MockService#success}</prep:success>
            <prep:frontendID>${#MockService#CONST-fronendID}</prep:frontendID>
         </prep:serviceResponse>
         <!--type: ResultCodeEnum - enumeration: [-2,-1,0,1,2,3,4,5,6,7,10,11,12,13,14,15,16,17,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,300,301,302,303,304,305,306,307,308,403,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,500,501,503,504,505,506,507,508,509,510,511,512,513,514,601,602,603,604,605,606,607,608,609,610,611,701,702,703,704,705,801,802]-->
         <prep:resultCode>${#MockService#resultCode}</prep:resultCode>
         <prep:reasonMsg>${#MockService#reasonMsg}</prep:reasonMsg>
      </prep:PrepareClawbackResult>
   </soapenv:Body>
</soapenv:Envelope>]]></con:responseContent>
    <con:wsaConfig mustUnderstand="NONE" version="200508" action="prepareClawback"/>
  </con:response>
  <con:response name="Response-soapFault" id="75b44454-086b-43cd-9f1c-b087d6392d0e" httpResponseStatus="500" encoding="UTF-8" dataSource="">
    <con:settings/>
    <con:responseContent><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soap:Body>
      <soap:Fault>
         <faultcode>soap:Server</faultcode>
         <faultstring>${#MockService#faultString}</faultstring>
         <detail>
            <PrepaidITServiceSystemFault xmlns="http://version15.prepaid.de.telefonica.com/prepaiditcustomercareservicetypes">
               <resultCode>${#MockService#resultCode}</resultCode>
               <reasonMsg>${#MockService#reasonMsg}</reasonMsg>
            </PrepaidITServiceSystemFault>
         </detail>
      </soap:Fault>
   </soap:Body>
</soap:Envelope>]]></con:responseContent>
    <con:wsaConfig mustUnderstand="NONE" version="200508" action="prepareClawback"/>
  </con:response>
</con:mockOperation>
