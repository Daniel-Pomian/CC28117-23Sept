<?xml version="1.0" encoding="UTF-8"?>
<con:interface xsi:type="con:WsdlInterface" id="fd7a72ce-d399-42d2-b704-b18319b3191c" wsaVersion="NONE" name="SubscriptionManagementServiceSoapBinding" type="wsdl" bindingName="{http://directrecharge.o2.com/ws/evolutionservice/}SubscriptionManagementServiceSoapBinding" soapVersion="1_1" anonymous="optional" definition="WSDLs/DRC-CustomerChargingService/CustomerChargingService.wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="fd7a72ce-d399-42d2-b704-b18319b3191cfileName">SubscriptionManagementServiceSoapBinding</con:setting>
  </con:settings>
  <con:definitionCache type="TEXT" rootPart="file:/D:/Projects/Telefonica/DirectReCharge/drc-qa/soapUI-Pro/DRC_Release_21-3/WSDLs/DRC-CustomerChargingService/CustomerChargingService.wsdl">
    <con:part>
      <con:url>file:/D:/Projects/Telefonica/DirectReCharge/drc-qa/soapUI-Pro/DRC_Release_21-3/WSDLs/DRC-CustomerChargingService/CustomerChargingService.wsdl</con:url>
      <con:content><![CDATA[<wsdl:definitions name="CustomerChargingService" targetNamespace="http://directrecharge.o2.com/ws/evolutionservice/" xmlns:tns="http://directrecharge.o2.com/ws/evolutionservice/" xmlns:types="http://directrecharge.o2.com/ws/evolutionservice/customercharging/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsp="http://www.w3.org/ns/ws-policy" xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702">
  <wsdl:types>
    <xs:schema>
      <xs:import namespace="http://directrecharge.o2.com/ws/evolutionservice/customercharging/" schemaLocation="xsd/CustomerChargingServiceTypes.xsd"/>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="healthCheck">
    <wsdl:part name="parameters" element="types:healthCheck"/>
  </wsdl:message>
  <wsdl:message name="healthCheckResponse">
    <wsdl:part name="parameters" element="types:healthCheckResponse"/>
  </wsdl:message>
  <wsdl:message name="chargeCustomer">
    <wsdl:part name="parameters" element="types:chargeCustomer"/>
  </wsdl:message>
  <wsdl:message name="chargeCustomerResponse">
    <wsdl:part name="parameters" element="types:chargeCustomerResponse"/>
  </wsdl:message>
  <wsdl:message name="registerForDirectDebit">
    <wsdl:part name="parameters" element="types:registerForDirectDebit"/>
  </wsdl:message>
  <wsdl:message name="registerForDirectDebitResponse">
    <wsdl:part name="parameters" element="types:registerForDirectDebitResponse"/>
  </wsdl:message>
  <wsdl:message name="deregisterForDirectDebit">
    <wsdl:part name="parameters" element="types:deregisterForDirectDebit"/>
  </wsdl:message>
  <wsdl:message name="deregisterForDirectDebitResponse">
    <wsdl:part name="parameters" element="types:deregisterForDirectDebitResponse"/>
  </wsdl:message>
  <wsdl:message name="updateDirectDebitParameters">
    <wsdl:part name="parameters" element="types:updateDirectDebitParameters"/>
  </wsdl:message>
  <wsdl:message name="updateDirectDebitParametersResponse">
    <wsdl:part name="parameters" element="types:updateDirectDebitParametersResponse"/>
  </wsdl:message>
  <wsdl:message name="registerSubscription">
    <wsdl:part name="parameters" element="types:registerSubscription"/>
  </wsdl:message>
  <wsdl:message name="registerSubscriptionResponse">
    <wsdl:part name="parameters" element="types:registerSubscriptionResponse"/>
  </wsdl:message>
  <wsdl:message name="setSubscriptionStatus">
    <wsdl:part name="parameters" element="types:setSubscriptionStatus"/>
  </wsdl:message>
  <wsdl:message name="setSubscriptionStatusResponse">
    <wsdl:part name="parameters" element="types:setSubscriptionStatusResponse"/>
  </wsdl:message>
  <wsdl:message name="deleteSubscription">
    <wsdl:part name="parameters" element="types:deleteSubscription"/>
  </wsdl:message>
  <wsdl:message name="deleteSubscriptionResponse">
    <wsdl:part name="parameters" element="types:deleteSubscriptionResponse"/>
  </wsdl:message>
  <wsdl:message name="deregisterForPaymentMethod">
    <wsdl:part name="parameters" element="types:deregisterForPaymentMethod"/>
  </wsdl:message>
  <wsdl:message name="deregisterForPaymentMethodResponse">
    <wsdl:part name="parameters" element="types:deregisterForPaymentMethodResponse"/>
  </wsdl:message>
  <wsdl:message name="selectPaymentMethod">
    <wsdl:part name="parameters" element="types:selectPaymentMethod"/>
  </wsdl:message>
  <wsdl:message name="selectPaymentMethodResponse">
    <wsdl:part name="parameters" element="types:selectPaymentMethodResponse"/>
  </wsdl:message>
  <wsdl:message name="customerChargingException">
    <wsdl:part name="parameters" element="types:drcFault"/>
  </wsdl:message>
  <wsdl:message name="limitExceededException">
    <wsdl:part name="parameters" element="types:limitExceededFault"/>
  </wsdl:message>
  <wsdl:message name="msisdnInUseException">
    <wsdl:part name="parameters" element="types:msisdnInUseFault"/>
  </wsdl:message>
  <wsdl:portType name="CustomerChargingServicePortType">
    <wsdl:operation name="healthCheck">
      <wsdl:documentation>The operation for health check.</wsdl:documentation>
      <wsdl:input name="healthCheck" message="tns:healthCheck"/>
      <wsdl:output name="healthCheckResponse" message="tns:healthCheckResponse"/>
    </wsdl:operation>
    <wsdl:operation name="chargeCustomer">
      <wsdl:documentation>The operation for charging of o2 customers.
				In case the pack element provided with a chargeCustomer request a pack will be charged,
				otherwise a monetary charge.

				In both cases DRC will do eligibility check, but in different order:
				• Pack: the eligibility check will be done after processing of the pack. In case of failure
				of the eligibility check, the charge operation will not be rolled back and the result of the check will
				be provided with the regular response, not Failure.
				• Monetary: the eligibility check will be done before charging. In case of
				eligibility check failure no charge will be done and DRC answers with LimitExceededFailure.

				In case of an initial credit card charge following data is required:
				• the current registration status of the subscription must be INITIAL
				• the payment method in request must be INITIAL 
				• the gpsTxId must be  provided with the request.
				DRC will capture the CC transaction with given id in GPS after successful charging of the amount in OCS.
				In other cases DRC gpsTxId must not be provided. It will be created by DRC during authorization request to GPS.</wsdl:documentation>
      <wsdl:input name="chargeCustomer" message="tns:chargeCustomer"/>
      <wsdl:output name="chargeCustomerResponse" message="tns:chargeCustomerResponse"/>
      <wsdl:fault name="customerChargingException" message="tns:customerChargingException">
        <wsdl:documentation><![CDATA[<table><tbody>
                    <tr bgcolor="black">
                    <th style="color:white;">Error Code</th>
                    <th style="color:white;">Originator</th>
                    <th style="color:white;">Description</th>
                    <th style="color:white;">Error Type</th>
                    </tr>
                    <tr><td>102</td><td>DRC</td><td>Invalid data in request</td><td>Permanent</td></tr>
                    <tr><td>103</td><td>DRC</td><td>Could not determine a correlationId for application</td><td>Permanent</td></tr>
                    <tr><td>104</td><td>DRC</td><td>Unknown problem within processing chain</td><td>Permanent</td></tr>
                    <tr><td>105</td><td>DRC</td><td>Used PaymentUseCase is not allowed</td><td>Permanent</td></tr>
                    <tr><td>106</td><td>DRC</td><td>Used PaymentUseCase is unknown</td><td>Permanent</td></tr>
                    <tr><td>108</td><td>DRC</td><td>Internal technical error DRC</td><td>Permanent</td></tr>
                    <tr><td>110</td><td>DRC</td><td>Exception during database access</td><td>Transient</td></tr>
                    <tr><td>150</td><td>DRC</td><td>SocketTimeoutException occurred during third party backend call</td><td>Transient</td></tr>
                    <tr><td>151</td><td>DRC</td><td>Connection refused during third party backend call</td><td>Transient</td></tr>
                    <tr><td>1002</td><td>DRC</td><td>Msisdn not registered by PSP</td><td>Permanent</td></tr>
                    <tr><td>1050</td><td>DRC</td><td>Service provider not accepted for channel</td><td>Permanent</td></tr>
                    <tr><td>1051</td><td>DRC</td><td>Service provider not accepted for applicationId</td><td>Permanent</td></tr>
                    <tr><td>1103</td><td>DRC</td><td>Partner not allowed to use the service</td><td>Permanent</td></tr>
                    <tr><td>1104</td><td>DRC</td><td>The account unknown / not registered</td><td>Permanent</td></tr>
                    <tr><td>1105</td><td>DRC</td><td>The account is inactive</td><td>Permanent</td></tr>
                    <tr><td>1119</td><td>DRC</td><td>Tenant id does not match</td><td>Permanent</td></tr>
                    <tr><td>1120</td><td>DRC</td><td>Brand id does not match</td><td>Permanent</td></tr>
                    <tr><td>1201</td><td>DRC</td><td>Recharge not allowed in current state</td><td>Permanent</td></tr>
                    <tr><td>1202</td><td>DRC</td><td>Within WAITING_FOR_FIRST_DIRECT_DEBIT only one monetary recharge is possible, but at least one existing found</td><td>Permanent</td></tr>
                    <tr><td>1203</td><td>DRC</td><td>No direct debit parameter found to use by eligibility check</td><td>Permanent</td></tr>
                    <tr><td>20070</td><td>PIRANHA</td><td>Msisdn unknown</td><td>Permanent</td></tr>
                    <tr><td>20071</td><td>PIRANHA</td><td>Msisdn not active</td><td>Permanent</td></tr>
                    <tr><td>40000</td><td>GPS</td><td>Validation failed in GPS</td><td>Permanent</td></tr>
                    <tr><td>40100</td><td>GPS</td><td>Authentication failed</td><td>Permanent</td></tr>
                    <tr><td>40200</td><td>GPS</td><td>Payment blocked by risk management</td><td>Permanent</td></tr>
                    <tr><td>40201</td><td>GPS</td><td>Payment means invalid</td><td>Permanent</td></tr>
                    <tr><td>40202</td><td>GPS</td><td>Card expared</td><td>Permanent</td></tr>
                    <tr><td>40203</td><td>GPS</td><td>Transaction aborted</td><td>Permanent</td></tr>
                    <tr><td>40207</td><td>GPS</td><td>Alias invalid</td><td>Permanent</td></tr>
                    <tr><td>40208</td><td>GPS</td><td>Amount invalid</td><td>Permanent</td></tr>
                    <tr><td>40209</td><td>GPS</td><td>Currency invalid</td><td>Permanent</td></tr>
                    <tr><td>40210</td><td>GPS</td><td>Transaction declined</td><td>Permanent</td></tr>
                    <tr><td>40211</td><td>GPS</td><td>Transaction not found</td><td>Permanent</td></tr>
                    <tr><td>40212</td><td>GPS</td><td>Transaction validation failed</td><td>Permanent</td></tr>
                    <tr><td>40213</td><td>GPS</td><td>3DS authentication failed</td><td>Permanent</td></tr>
                    <tr><td>40214</td><td>GPS</td><td>Transactoin in wrong status</td><td>Permanent</td></tr>
                    <tr><td>40215</td><td>GPS</td><td>Transaction not started</td><td>Permanent</td></tr>
                    <tr><td>40216</td><td>GPS</td><td>Invalid brand id</td><td>Permanent</td></tr>
                    <tr><td>40300</td><td>GPS</td><td>Access to the resource denied</td><td>Permanent</td></tr>
                    <tr><td>40400</td><td>GPS</td><td>Resource not found in GPS</td><td>Permanent</td></tr>
                    <tr><td>40600</td><td>GPS</td><td>Wrong Access header provided</td><td>Permanent</td></tr>
                    <tr><td>41500</td><td>GPS</td><td>Wrong Content-Type used</td><td>Permanent</td></tr>
                    <tr><td>42900</td><td>GPS</td><td>Client provides to many requests in a certain time</td><td>Transient</td></tr>
                    <tr><td>50000</td><td>GPS</td><td>Unexpected error in GPS</td><td>Transient</td></tr>
                    <tr><td>50200</td><td>GPS</td><td>Action not supported by PSP</td><td>Transient</td></tr>
                    <tr><td>50201</td><td>GPS</td><td>Authentication by PSP failed</td><td>Transient</td></tr>
                    <tr><td>50202</td><td>GPS</td><td>Communication with PSP failed</td><td>Transient</td></tr>
                    <tr><td>50203</td><td>GPS</td><td>Communication with PSP timed out</td><td>Transient</td></tr>
                    <tr><td>50204</td><td>GPS</td><td>Condition not sutisfied in PSP</td><td>Transient</td></tr>
                    <tr><td>50205</td><td>GPS</td><td>General declined by PSP</td><td>Transient</td></tr>
                    <tr><td>50206</td><td>GPS</td><td>Internal error in PSP</td><td>Transient</td></tr>
                    <tr><td>50207</td><td>GPS</td><td>No contract in PSP</td><td>Transient</td></tr>
                    <tr><td>50208</td><td>GPS</td><td>No credits available in PSP</td><td>Transient</td></tr>
                    <tr><td>50209</td><td>GPS</td><td>Permission dinied in PSP</td><td>Transient</td></tr>
                    <tr><td>50210</td><td>GPS</td><td>Token expired</td><td>Transient</td></tr>
                    <tr><td>50211</td><td>GPS</td><td>Token invalid</td><td>Transient</td></tr>
                    <tr><td>50300</td><td>GPS</td><td>PSP is not available</td><td>Transient</td></tr>
                    <tr><td>50400</td><td>GPS</td><td>Timeout occurred during communication to PSP</td><td>Transient</td></tr>
                    </tbody></table>
                    <span>The OCS errors are listed in the DRC IF specification document.</span>]]]]>><![CDATA[</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="limitExceededException" message="tns:limitExceededException">
        <wsdl:documentation>The information about limit parameter that has
					been exceeded.
					If more as one parameter exceeded the only one with
					the longest reset date will be delivered, i.e. if a daily and a
					monthly limit exceeded the monthly one will be delivered.</wsdl:documentation>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:portType name="SubscriptionManagementServicePortType">
    <wsdl:operation name="healthCheck">
      <wsdl:documentation>The operation for health check.</wsdl:documentation>
      <wsdl:input name="healthCheck" message="tns:healthCheck"/>
      <wsdl:output name="healthCheckResponse" message="tns:healthCheckResponse"/>
    </wsdl:operation>
    <wsdl:operation name="registerForDirectDebit">
      <wsdl:documentation>Registers a customer for direct debit service.
				This operation is used also for updating of the already registered
				data.

				The msisdn must be provided with the first registration
				request.
				In case a msisdn change DRC will switch the
				externalContractId relation from the old msisdn to the new one.
				This
				means that the return transactions (RLS) will be processed with the
				new msisdn.

				The multibrand id must be provided with the first registration request.

				If bankData element provided the data in the DRC database
				will be
				updated with the new delivered. Else the bank data in DRC will not
				changed.

				If directDebitState element provided the account
				state in DRC
				database
				will be updated, else no change will be done.

				If
				registrationOptions element exists in request the delivered
				registration options will be synchronized with the data in DRC
				database: i.e.:
				• An option will be removed from DRC database if it
				not exists in the
				delivered list
				• An option from delivered will be
				add to DRC database if it not
				existed before
				• An option value will be
				updated if it already exists in DRC
				Otherwise the registration
				options will not be changed.
				A queryBalance request to OCS wll be
				done, to be able to check if the
				subscription balance is below the
				low balance threshold value, if:
				• The low balance recharge option is
				newly selected/registered by
				customer via PPIT
				• The low balance
				threshold value is changed
				• The direct debit state is changed from
				inactive to ACTIVE or to
				WAITING_FOR_FIRST_DIRECT_DEBIT and the low
				balance recharge option
				is used.
				In case the balance is lower of the
				specified threshold value DRC will
				trigger recharge itself, but only
				for the first time. After this the
				threshold charges will be
				triggered as usual by OCS.

				If customerParameters element provided
				with the request the parameter
				data in DRC database will be
				synchronized with the delivered
				parameter list: i.e.
				• A parameter
				will be removed from DRC database if it not exists in
				the delivered
				list
				• A parameter from delivered will be add to DRC database if it
				not
				existed before
				• A parameter value will be updated if it already
				exists in DRC
				DRC will also make the eligibility check for all
				supported customer
				parameters (s. list below) and provide it’s result
				with the
				response.
				If customerParameters element not present the
				customer parameters will
				not be changed and not eligibility check
				will be done.
				Following parameters are currently supported for
				customer:
				• GENERAL_MONTHLY_MAX_AMOUNT.</wsdl:documentation>
      <wsdl:input name="registerForDirectDebit" message="tns:registerForDirectDebit"/>
      <wsdl:output name="registerForDirectDebitResponse" message="tns:registerForDirectDebitResponse"/>
      <wsdl:fault name="customerChargingException" message="tns:customerChargingException">
        <wsdl:documentation><![CDATA[<table><tbody>
                    <tr bgcolor="black">
                    <th style="color:white;">Error Code</th>
                    <th style="color:white;">Originator</th>
                    <th style="color:white;">Description</th>
                    <th style="color:white;">Error Type</th>
                    </tr>
                    <tr><td>102</td><td>DRC</td><td>Invalid data in request</td><td>Permanent</td></tr>
                    <tr><td>108</td><td>DRC</td><td>Internal technical error DRC</td><td>Permanent</td></tr>
                    <tr><td>110</td><td>DRC</td><td>Exception during database access</td><td>Transient</td></tr>
                    <tr><td>1103</td><td>DRC</td><td>Partner not allowed to use the service</td><td>Permanent</td></tr>
                    <tr><td>1106</td><td>DRC</td><td>The account data is not complete. The activation is not possible</td><td>Permanent</td></tr>
                    <tr><td>1107</td><td>DRC</td><td>Unknown brand/tenant id</td></tr>
                    <tr><td>1108</td><td>DRC</td><td>Invalid threshold value</td></tr>
                    <tr><td>1110</td><td>DRC</td><td>Invalid monthly amount, i.e. the charge operation with this amount will fail because of eligibility check</td></tr>
                    <tr><td>1119</td><td>DRC</td><td>Tenant id does not match</td><td>Permanent</td></tr>
                    <tr><td>1120</td><td>DRC</td><td>Brand id does not match</td><td>Permanent</td></tr>
                    <tr><td>1127</td><td>DRC</td><td>Direct debit parameter not supported</td><td>Permanent</td></tr>
                    <tr><td>1128</td><td>DRC</td><td>The value of a direct debit parameter greater than max allowed</td><td>Permanent</td></tr>
                    <tr><td>20070</td><td>PIRANHA</td><td>Msisdn unknown</td><td>Permanent</td></tr>
                    <tr><td>20071</td><td>PIRANHA</td><td>Msisdn not active</td><td>Permanent</td></tr>
                    </tbody></table>]]]]>><![CDATA[</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="msisdnInUseException" message="tns:msisdnInUseException">
        <wsdl:documentation>Thrown in case the msisdn provided with the appropriate request is already associated with an other subscription.
                	The external contract id of this subscription be provided with the fault.</wsdl:documentation>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="deregisterForDirectDebit">
      <wsdl:documentation>De-registers a registered customer for direct
				debit service.

				With deregister request DRC will deactivate account
				and cleanup all
				account related data, i.e.:
				• all recharge options for deregistered account
				• bank data
				• start day of 30 day limit cycle
				• direct debit status</wsdl:documentation>
      <wsdl:input name="deregisterForDirectDebit" message="tns:deregisterForDirectDebit"/>
      <wsdl:output name="deregisterForDirectDebitResponse" message="tns:deregisterForDirectDebitResponse"/>
      <wsdl:fault name="customerChargingException" message="tns:customerChargingException">
        <wsdl:documentation><![CDATA[<table><tbody>
                    <tr bgcolor="black">
                    <th style="color:white;">Error Code</th>
                    <th style="color:white;">Originator</th>
                    <th style="color:white;">Description</th>
                    <th style="color:white;">Error Type</th>
                    </tr>
                    <tr><td>102</td><td>DRC</td><td>Invalid data in request</td><td>Permanent</td></tr>
                    <tr><td>108</td><td>DRC</td><td>Internal technical error DRC</td><td>Permanent</td></tr>
                    <tr><td>110</td><td>DRC</td><td>Exception during database access</td><td>Transient</td></tr>
                    <tr><td>1103</td><td>DRC</td><td>Partner not allowed to use the service</td><td>Permanent</td></tr>
                    </tbody></table>]]]]>><![CDATA[</wsdl:documentation>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="updateDirectDebitParameters">
      <wsdl:documentation>Creates or updates the brand specific direct
				debit parameters.
				The parameters will be used by DRC for eligibility
				check, processing of
				return transaction and so on...

				The parameters
				can by created (if first call) or updated but not
				deleted.

				With any
				request parameter set for one or more brand/tenant combination
				can be
				updated.
				But any provided parameter set must be always completely
				filled.

				If any existing parameter was changed, its value will be used
				only for
				new requests.
				The data of already processed requests will not
				be adapted with changed
				parameter value.</wsdl:documentation>
      <wsdl:input name="updateDirectDebitParameters" message="tns:updateDirectDebitParameters"/>
      <wsdl:output name="updateDirectDebitParametersResponse" message="tns:updateDirectDebitParametersResponse"/>
      <wsdl:fault name="customerChargingException" message="tns:customerChargingException">
        <wsdl:documentation><![CDATA[<table><tbody>
                    <tr bgcolor="black">
                    <th style="color:white;">Error Code</th>
                    <th style="color:white;">Originator</th>
                    <th style="color:white;">Description</th>
                    <th style="color:white;">Error Type</th>
                    </tr>
                    <tr><td>102</td><td>DRC</td><td>Invalid data in request</td><td>Permanent</td></tr>
                    <tr><td>108</td><td>DRC</td><td>Internal technical error DRC</td><td>Permanent</td></tr>
                    <tr><td>110</td><td>DRC</td><td>Exception during database access</td><td>Transient</td></tr>
                    <tr><td>1103</td><td>DRC</td><td>Partner not allowed to use the service</td><td>Permanent</td></tr>
                    <tr><td>1107</td><td>DRC</td><td>Unknown brand/tenant id</td></tr>
                    <tr><td>1109</td><td>DRC</td><td>Request data is not complete</td></tr>
                    <tr><td>1128</td><td>DRC</td><td>The value of a direct debit parameter greater than max allowed</td><td>Permanent</td></tr>
                    </tbody></table>]]]]>><![CDATA[</wsdl:documentation>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="registerSubscription">
      <wsdl:documentation>Registers a customer for the charging service with any payment method.
				This call will be used for re-registration and de-activation as well, therefore an update of all 
				parameters including the MSISDN to that specific ContractId is possible.

				The account id (msisdn, brand and tenant id) must be provided with the first registration request.
				If account id provided with a follow-up request and the msisdn is changed DRC will switch the
				externalContractId relation from the old msisdn to the new one. This means that the return transactions (RLS) will be processed with the
				new msisdn.
				If the provided msisdn is already in use by an other contract, MsisdnIUse fault will be raised.

				If bankData element provided the data in the DRC database
				will be updated with the new delivered. Else the bank data in DRC will not changed.
				If ddState element provided the direct debit state in DRC
				database will be updated, else no change will be done.

				If ccData element provided the data in the DRC database
				will be updated with the new delivered. Else the credit card data in DRC will not changed.
				If ccState element provided the credit card state in DRC
				database will be updated, else no change will be done.
				
				If selectedPaymentMehtod element provided with a request
				the value of the selected payment method will be updated with the delivered one,
				else no change will be done.
				If the requested payment method was not registered by DRC before, a fault will be thrown.

				If registrationOptions element exists in request the delivered
				registration options will be synchronized with the data in DRC
				database: i.e.:
				• An option will be removed from DRC database if it not exists in the delivered list.
				• An option from delivered will be add to DRC database if it not existed before.
				• An option value will be updated if it already exists in DRC.
				Otherwise the registration options will not be changed.
				
				If customerParameters element provided with the request the parameter
				data in DRC database will be synchronized with the delivered
				parameter list: i.e.
				• A parameter will be removed from DRC database if it not exists in
				the delivered list
				• A parameter from delivered will be add to DRC database if it not existed before
				• A parameter value will be updated if it already exists in DRC
				DRC will also make the eligibility check for all supported customer
				parameters (s. list below) and provide it’s result with the response.
				If customerParameters element not present the customer parameters will
				not be changed and not eligibility check will be done.
				Following parameters are currently supported for customer:
				• GENERAL_MONTHLY_MAX_AMOUNT.

				If SubscriptionStatus element provided and differs from value in DRC it will be changed, else no change will be done.
				Following checks will be additionally done if 
				 - the status changed to ACTIVE value or 
				 - the status is already ACTIVE and other data is changed:
				• A fault will be raised if any payment method (CC or DD) is selected and a charge operation is not possible with the subscription data actually saved in DRC.
				• A queryBalance request to OCS wll be done, to be able to check if the subscription balance is below the
				low balance threshold value, if:
					• The low balance recharge option is newly selected/registered by customer via PPIT
					• The low balance threshold value is changed
				In case the balance is lower of the specified threshold value DRC will trigger recharge itself, but only
				for the first time. After this the threshold charges will be triggered as usual by OCS.</wsdl:documentation>
      <wsdl:input name="registerSubscription" message="tns:registerSubscription"/>
      <wsdl:output name="registerSubscriptionResponse" message="tns:registerSubscriptionResponse"/>
      <wsdl:fault name="customerChargingException" message="tns:customerChargingException">
        <wsdl:documentation><![CDATA[<table><tbody>
                    <tr bgcolor="black">
                    <th style="color:white;">Error Code</th>
                    <th style="color:white;">Originator</th>
                    <th style="color:white;">Description</th>
                    <th style="color:white;">Error Type</th>
                    </tr>
                    <tr><td>102</td><td>DRC</td><td>Invalid data in request</td><td>Permanent</td></tr>
                    <tr><td>108</td><td>DRC</td><td>Internal technical error DRC</td><td>Permanent</td></tr>
                    <tr><td>110</td><td>DRC</td><td>Exception during database access</td><td>Transient</td></tr>
                    <tr><td>150</td><td>DRC</td><td>SocketTimeoutException occurred during third party backend call</td><td>Transient</td></tr>
                    <tr><td>151</td><td>DRC</td><td>Connection refused during third party backend call</td><td>Transient</td></tr>
                    <tr><td>1050</td><td>DRC</td><td>Service provider not accepted for channel</td><td>Permanent</td></tr>
                    <tr><td>1051</td><td>DRC</td><td>Service provider not accepted for applicationId</td><td>Permanent</td></tr>
                    <tr><td>1103</td><td>DRC</td><td>Partner not allowed to use the service</td><td>Permanent</td></tr>
                    <tr><td>1106</td><td>DRC</td><td>The account data is not complete. The activation is not possible</td><td>Permanent</td></tr>
                    <tr><td>1107</td><td>DRC</td><td>Unknown brand/tenant id</td></tr>
                    <tr><td>1108</td><td>DRC</td><td>Invalid threshold value</td></tr>
                    <tr><td>1110</td><td>DRC</td><td>Invalid monthly amount, i.e. the charge operation with this amount will fail because of eligibility check</td></tr>
                    <tr><td>1119</td><td>DRC</td><td>Tenant id does not match</td><td>Permanent</td></tr>
                    <tr><td>1120</td><td>DRC</td><td>Brand id does not match</td><td>Permanent</td></tr>
                    <tr><td>1127</td><td>DRC</td><td>Direct debit parameter not supported</td><td>Permanent</td></tr>
                    <tr><td>1128</td><td>DRC</td><td>The value of a direct debit parameter greater than max allowed</td><td>Permanent</td></tr>
                    <tr><td>1141</td><td>DRC</td><td>Payment method not registered</td><td>Permanent</td></tr>
                    <tr><td>1203</td><td>DRC</td><td>No direct debit parameter found</td><td>Permanent</td></tr>
                    <tr><td>20070</td><td>PIRANHA</td><td>Msisdn unknown</td><td>Permanent</td></tr>
                    <tr><td>20071</td><td>PIRANHA</td><td>Msisdn not active</td><td>Permanent</td></tr>
                    </tbody></table>]]]]>><![CDATA[</wsdl:documentation>
      </wsdl:fault>
      <wsdl:fault name="msisdnInUseException" message="tns:msisdnInUseException">
        <wsdl:documentation>Thrown in case the msisdn provided with the appropriate request is already associated with an other subscription.
                	The external contract id of this subscription be provided with the fault.</wsdl:documentation>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="setSubscriptionStatus">
      <wsdl:documentation>Sets subscription status.
				If SubscriptionStatus element differs from value in DRC it will be changed, else no change will be done.
				Following checks will be additionally done if the status changed to ACTIVE value:
				• A fault will be raised if any payment method (CC or DD) is selected and any charge operation is not possible with the subscription data actually saved in DRC.
				• A queryBalance request to OCS wll be done, to be able to check if the subscription balance is below the
				low balance threshold value, if:
					• The low balance recharge option is newly selected/registered by customer via PPIT
					• The low balance threshold value is changed
				In case the balance is lower of the specified threshold value DRC will trigger recharge itself, but only
				for the first time. After this the threshold charges will be triggered as usual by OCS.</wsdl:documentation>
      <wsdl:input name="setSubscriptionStatus" message="tns:setSubscriptionStatus"/>
      <wsdl:output name="setSubscriptionStatusResponse" message="tns:setSubscriptionStatusResponse"/>
      <wsdl:fault name="customerChargingException" message="tns:customerChargingException">
        <wsdl:documentation><![CDATA[<table><tbody>
                    <tr bgcolor="black">
                    <th style="color:white;">Error Code</th>
                    <th style="color:white;">Originator</th>
                    <th style="color:white;">Description</th>
                    <th style="color:white;">Error Type</th>
                    </tr>
                    <tr><td>102</td><td>DRC</td><td>Invalid data in request</td><td>Permanent</td></tr>
                    <tr><td>108</td><td>DRC</td><td>Internal technical error DRC</td><td>Permanent</td></tr>
                    <tr><td>110</td><td>DRC</td><td>Exception during database access</td><td>Transient</td></tr>
                    <tr><td>1103</td><td>DRC</td><td>Partner not allowed to use the service</td><td>Permanent</td></tr>
                    <tr><td>1104</td><td>DRC</td><td>The account unknown / not registered</td><td>Permanent</td></tr>
                    <tr><td>1106</td><td>DRC</td><td>The account data is not complete. The activation is not possible</td><td>Permanent</td></tr>
                    <tr><td>1107</td><td>DRC</td><td>Unknown brand/tenant id</td></tr>
                    <tr><td>1108</td><td>DRC</td><td>Invalid threshold value</td></tr>
                    <tr><td>1203</td><td>DRC</td><td>No direct debit parameter found</td><td>Permanent</td></tr>
                    </tbody></table>]]]]>><![CDATA[</wsdl:documentation>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="deleteSubscription">
      <wsdl:documentation>Deletes all subscription data for given contract id from DRC. 
				After deletion of subscription data no operation will be possible for this subscription including charge back and bank transfer.
				The operation will be ignored in case no subscription with given external contract id could be found in DRC.</wsdl:documentation>
      <wsdl:input name="deleteSubscription" message="tns:deleteSubscription"/>
      <wsdl:output name="deleteSubscriptionResponse" message="tns:deleteSubscriptionResponse"/>
      <wsdl:fault name="customerChargingException" message="tns:customerChargingException">
        <wsdl:documentation><![CDATA[<table><tbody>
                    <tr bgcolor="black">
                    <th style="color:white;">Error Code</th>
                    <th style="color:white;">Originator</th>
                    <th style="color:white;">Description</th>
                    <th style="color:white;">Error Type</th>
                    </tr>
                    <tr><td>102</td><td>DRC</td><td>Invalid data in request</td><td>Permanent</td></tr>
                    <tr><td>108</td><td>DRC</td><td>Internal technical error DRC</td><td>Permanent</td></tr>
                    <tr><td>110</td><td>DRC</td><td>Exception during database access</td><td>Transient</td></tr>
                    <tr><td>1103</td><td>DRC</td><td>Partner not allowed to use the service</td><td>Permanent</td></tr>
                    <tr><td>1201</td><td>DRC</td><td>Action not allowed in current state</td><td>Permanent</td></tr>
                    </tbody></table>]]]]>><![CDATA[</wsdl:documentation>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="deregisterForPaymentMethod">
      <wsdl:documentation>De-registers a registered payment method.
				Any charges with deregistered payment method will be no more possible.
				A fault will be raised if actual subscription status is ACTIVE and the requested payment method was selected before call. 
				If the requested payment method has already been deregistered, the request will be ignored.
				If delivered payment method is NONE, the request will be ignored.</wsdl:documentation>
      <wsdl:input name="deregisterForPaymentMethod" message="tns:deregisterForPaymentMethod"/>
      <wsdl:output name="deregisterForPaymentMethodResponse" message="tns:deregisterForPaymentMethodResponse"/>
      <wsdl:fault name="customerChargingException" message="tns:customerChargingException">
        <wsdl:documentation><![CDATA[<table><tbody>
                    <tr bgcolor="black">
                    <th style="color:white;">Error Code</th>
                    <th style="color:white;">Originator</th>
                    <th style="color:white;">Description</th>
                    <th style="color:white;">Error Type</th>
                    </tr>
                    <tr><td>102</td><td>DRC</td><td>Invalid data in request</td><td>Permanent</td></tr>
                    <tr><td>108</td><td>DRC</td><td>Internal technical error DRC</td><td>Permanent</td></tr>
                    <tr><td>110</td><td>DRC</td><td>Exception during database access</td><td>Transient</td></tr>
                    <tr><td>1050</td><td>DRC</td><td>Service provider not accepted for channel</td><td>Permanent</td></tr>
                    <tr><td>1051</td><td>DRC</td><td>Service provider not accepted for applicationId</td><td>Permanent</td></tr>
                    <tr><td>1103</td><td>DRC</td><td>Partner not allowed to use the service</td><td>Permanent</td></tr>
                    <tr><td>1104</td><td>DRC</td><td>The account unknown / not registered</td><td>Permanent</td></tr>
                    <tr><td>1106</td><td>DRC</td><td>The account data is not complete. The activation is not possible</td><td>Permanent</td></tr>
                    <tr><td>1141</td><td>DRC</td><td>Payment method not registered</td><td>Permanent</td></tr>
                    <tr><td>40000</td><td>GPS</td><td>Validation failed in GPS</td><td>Permanent</td></tr>
                    <tr><td>40100</td><td>GPS</td><td>Authentication failed</td><td>Permanent</td></tr>
                    <tr><td>40207</td><td>GPS</td><td>Alias invalid</td><td>Permanent</td></tr>
                    <tr><td>40300</td><td>GPS</td><td>Access to the resource denied</td><td>Permanent</td></tr>
                    <tr><td>40400</td><td>GPS</td><td>Resource not found in GPS</td><td>Permanent</td></tr>
                    <tr><td>40600</td><td>GPS</td><td>Wrong Access header provided</td><td>Permanent</td></tr>
                    <tr><td>41500</td><td>GPS</td><td>Wrong Content-Type used</td><td>Permanent</td></tr>
                    <tr><td>42900</td><td>GPS</td><td>Client provides to many requests in a certain time</td><td>Transient</td></tr>
                    <tr><td>50000</td><td>GPS</td><td>Unexpected error in GPS</td><td>Transient</td></tr>
                    <tr><td>50200</td><td>GPS</td><td>Action not supported by PSP</td><td>Transient</td></tr>
                    <tr><td>50201</td><td>GPS</td><td>Authentication by PSP failed</td><td>Transient</td></tr>
                    <tr><td>50202</td><td>GPS</td><td>Communication with PSP failed</td><td>Transient</td></tr>
                    <tr><td>50203</td><td>GPS</td><td>Communication with PSP timed out</td><td>Transient</td></tr>
                    <tr><td>50204</td><td>GPS</td><td>Condition not sutisfied in PSP</td><td>Transient</td></tr>
                    <tr><td>50205</td><td>GPS</td><td>General declined by PSP</td><td>Transient</td></tr>
                    <tr><td>50206</td><td>GPS</td><td>Internal error in PSP</td><td>Transient</td></tr>
                    <tr><td>50207</td><td>GPS</td><td>No contract in PSP</td><td>Transient</td></tr>
                    <tr><td>50208</td><td>GPS</td><td>No credits available in PSP</td><td>Transient</td></tr>
                    <tr><td>50209</td><td>GPS</td><td>Permission dinied in PSP</td><td>Transient</td></tr>
                    <tr><td>50210</td><td>GPS</td><td>Token expired</td><td>Transient</td></tr>
                    <tr><td>50211</td><td>GPS</td><td>Token invalid</td><td>Transient</td></tr>
                    <tr><td>50300</td><td>GPS</td><td>PSP is not available</td><td>Transient</td></tr>
                    <tr><td>50400</td><td>GPS</td><td>Timeout occurred during communication to PSP</td><td>Transient</td></tr>
                    </tbody></table>]]]]>><![CDATA[</wsdl:documentation>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="selectPaymentMethod">
      <wsdl:documentation>Selects payment method to be used for any charges.
				If the requested payment method has no not been registered by DRC before, a fault will be thrown.
				A fault will also be raised if actual subscription status is ACTIVE and any charge operation is not possible with selected payment method.</wsdl:documentation>
      <wsdl:input name="selectPaymentMethod" message="tns:selectPaymentMethod"/>
      <wsdl:output name="selectPaymentMethodResponse" message="tns:selectPaymentMethodResponse"/>
      <wsdl:fault name="customerChargingException" message="tns:customerChargingException">
        <wsdl:documentation><![CDATA[<table><tbody>
                    <tr bgcolor="black">
                    <th style="color:white;">Error Code</th>
                    <th style="color:white;">Originator</th>
                    <th style="color:white;">Description</th>
                    <th style="color:white;">Error Type</th>
                    </tr>
                    <tr><td>102</td><td>DRC</td><td>Invalid data in request</td><td>Permanent</td></tr>
                    <tr><td>108</td><td>DRC</td><td>Internal technical error DRC</td><td>Permanent</td></tr>
                    <tr><td>110</td><td>DRC</td><td>Exception during database access</td><td>Transient</td></tr>
                    <tr><td>1050</td><td>DRC</td><td>Service provider not accepted for channel</td><td>Permanent</td></tr>
                    <tr><td>1051</td><td>DRC</td><td>Service provider not accepted for applicationId</td><td>Permanent</td></tr>
                    <tr><td>1103</td><td>DRC</td><td>Partner not allowed to use the service</td><td>Permanent</td></tr>
                    <tr><td>1104</td><td>DRC</td><td>The account unknown / not registered</td><td>Permanent</td></tr>
                    <tr><td>1106</td><td>DRC</td><td>The account data is not complete. The activation is not possible</td><td>Permanent</td></tr>
                    <tr><td>1107</td><td>DRC</td><td>Unknown brand/tenant id</td></tr>
                    <tr><td>1108</td><td>DRC</td><td>Invalid threshold value</td></tr>
                    <tr><td>1141</td><td>DRC</td><td>Payment method not registered</td><td>Permanent</td></tr>
                    <tr><td>1203</td><td>DRC</td><td>No direct debit parameter found</td><td>Permanent</td></tr>
                    </tbody></table>]]]]>><![CDATA[</wsdl:documentation>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="CustomerChargingServiceSoapBinding" type="tns:CustomerChargingServicePortType">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="healthCheck">
      <soap:operation soapAction="healthCheck" style="document"/>
      <wsdl:input name="healthCheck">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="healthCheckResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="chargeCustomer">
      <soap:operation soapAction="chargeCustomer" style="document"/>
      <wsdl:input name="chargeCustomer">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="chargeCustomerResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="customerChargingException">
        <soap:fault name="customerChargingException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="limitExceededException">
        <soap:fault name="limitExceededException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:binding name="SubscriptionManagementServiceSoapBinding" type="tns:SubscriptionManagementServicePortType">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="healthCheck">
      <soap:operation soapAction="healthCheck" style="document"/>
      <wsdl:input name="healthCheck">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="healthCheckResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="registerForDirectDebit">
      <soap:operation soapAction="registerForDirectDebit" style="document"/>
      <wsdl:input name="registerForDirectDebit">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="registerForDirectDebitResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="customerChargingException">
        <soap:fault name="customerChargingException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="msisdnInUseException">
        <soap:fault name="msisdnInUseException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="deregisterForDirectDebit">
      <soap:operation soapAction="deregisterForDirectDebit" style="document"/>
      <wsdl:input name="deregisterForDirectDebit">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="deregisterForDirectDebitResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="customerChargingException">
        <soap:fault name="customerChargingException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="updateDirectDebitParameters">
      <soap:operation soapAction="updateDirectDebitParameters" style="document"/>
      <wsdl:input name="updateDirectDebitParameters">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="updateDirectDebitParametersResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="customerChargingException">
        <soap:fault name="customerChargingException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="registerSubscription">
      <soap:operation soapAction="registerSubscription" style="document"/>
      <wsdl:input name="registerSubscription">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="registerSubscriptionResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="customerChargingException">
        <soap:fault name="customerChargingException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="msisdnInUseException">
        <soap:fault name="msisdnInUseException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="setSubscriptionStatus">
      <soap:operation soapAction="setSubscriptionStatus" style="document"/>
      <wsdl:input name="setSubscriptionStatus">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="setSubscriptionStatusResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="customerChargingException">
        <soap:fault name="customerChargingException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="deleteSubscription">
      <soap:operation soapAction="deleteSubscription" style="document"/>
      <wsdl:input name="deleteSubscription">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="deleteSubscriptionResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="customerChargingException">
        <soap:fault name="customerChargingException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="deregisterForPaymentMethod">
      <soap:operation soapAction="deregisterForPaymentMethod" style="document"/>
      <wsdl:input name="deregisterForPaymentMethod">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="deregisterForPaymentMethodResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="customerChargingException">
        <soap:fault name="customerChargingException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="selectPaymentMethod">
      <soap:operation soapAction="selectPaymentMethod" style="document"/>
      <wsdl:input name="selectPaymentMethod">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="selectPaymentMethodResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="customerChargingException">
        <soap:fault name="customerChargingException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="CustomerChargingService">
    <wsdl:port name="CustomerChargingServicePort" binding="tns:CustomerChargingServiceSoapBinding">
      <soap:address location="http://127.0.0.1:8080/drc/ws/CustomerChargingService"/>
    </wsdl:port>
  </wsdl:service>
  <wsdl:service name="SubscriptionManagementService">
    <wsdl:port name="SubscriptionManagementServicePort" binding="tns:SubscriptionManagementServiceSoapBinding">
      <soap:address location="http://127.0.0.1:8080/drc/ws/SubscriptionManagementService"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content>
      <con:type>http://schemas.xmlsoap.org/wsdl/</con:type>
    </con:part>
    <con:part>
      <con:url>file:\D:\Projects\Telefonica\DirectReCharge\drc-qa\soapUI-Pro\DRC_Release_21-3\WSDLs\DRC-CustomerChargingService\xsd\CustomerChargingServiceTypes.xsd</con:url>
      <con:content><![CDATA[<xs:schema targetNamespace="http://directrecharge.o2.com/ws/evolutionservice/customercharging/" attributeFormDefault="unqualified" elementFormDefault="unqualified" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://directrecharge.o2.com/ws/evolutionservice/customercharging/" xmlns:tns="http://directrecharge.o2.com/ws/evolutionservice/customercharging/" xmlns:base="http://directrecharge.o2.com/ws/evolutionservice/base/" xmlns:bank="http://directrecharge.o2.com/ws/evolutionservice/bank/" xmlns:cc="http://directrecharge.o2.com/ws/evolutionservice/cc/">
  <xs:import namespace="http://directrecharge.o2.com/ws/evolutionservice/base/" schemaLocation="Base.xsd"/>
  <xs:import namespace="http://directrecharge.o2.com/ws/evolutionservice/bank/" schemaLocation="Bank.xsd"/>
  <xs:import namespace="http://directrecharge.o2.com/ws/evolutionservice/cc/" schemaLocation="CreditCard.xsd"/>
  <xs:simpleType name="referenceId">
    <xs:annotation>
      <xs:documentation>The unique ID for operation assigned by PPIT, e.g.:
				abcde12345678. The reference id will be used for duplicate check.
				The id will be forwarded to OCS with SOAP Addressing header
				"MessageID".</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:minLength value="1"/>
      <xs:maxLength value="50"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="packName">
    <xs:annotation>
      <xs:documentation>End customer name for a pack, will be given with
				the remittance information to bank.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:minLength value="1"/>
      <xs:maxLength value="64"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="packId">
    <xs:annotation>
      <xs:documentation>The system overall unique alphanumeric ID of a
				pack.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:minLength value="1"/>
      <xs:maxLength value="64"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="pack">
    <xs:annotation>
      <xs:documentation>The pack payment data.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="packName" type="packName">
        <xs:annotation>
          <xs:documentation>End customer name for a pack, will be given to
						remittance Information to bank.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="packId" type="packId">
        <xs:annotation>
          <xs:documentation>The system overall unique alphanumeric ID of a
						pack.
						For internal storing in DRC and error tracking purposes.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="paymentMethodEnum">
    <xs:annotation>
      <xs:documentation>Payment method values.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="NONE">
        <xs:annotation>
          <xs:documentation>No payment method selected.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="DD">
        <xs:annotation>
          <xs:documentation>The direct debit payment over bank.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="CC">
        <xs:annotation>
          <xs:documentation>The credit card payment.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="paymentUseCaseEnum">
    <xs:annotation>
      <xs:documentation>Payment use case values.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="INITIAL">
        <xs:annotation>
          <xs:documentation>The initial charge request.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ON_DEMAND">
        <xs:annotation>
          <xs:documentation>The direct on-demand charge request over Web
						Portal.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ON_DEMAND_SMS">
        <xs:annotation>
          <xs:documentation>The on-demand charge request triggered by SMS.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="MONTHLY">
        <xs:annotation>
          <xs:documentation>The periodic monthly charge request triggered by
						PPIT.
						The processing of the monthly charges triggered by OCS must
						be
						deactivated before using of this use case.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="PACKPAYMENT">
        <xs:annotation>
          <xs:documentation>The charge request for packs.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="externalContractId">
    <xs:annotation>
      <xs:documentation>The external contract id of the customer in PPIT,
				e.g.: 12345678. Please note, that in production the min length of
				the external contract id should be 3.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:minLength value="1"/>
      <xs:maxLength value="15"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="subscriptionStatusEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="INACTIVE">
        <xs:annotation>
          <xs:documentation>Inactive</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ACTIVE">
        <xs:annotation>
          <xs:documentation>Active</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="directDebitStateEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="INACTIVE">
        <xs:annotation>
          <xs:documentation>Inactive</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="WAITING_FOR_FIRST_DIRECT_DEBIT">
        <xs:annotation>
          <xs:documentation>Within this state DRC will wait for first direct
						debit recharge and keep this date for the calculation of the
						monthly amount during eligibility check later.
						Only one recharge is
						allowed in this status. Following calls will be rejected by DRC,
						so this status should be changed immediately after the fist call.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="INITIAL_RETENTION">
        <xs:annotation>
          <xs:documentation>Initial retention.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ACTIVE">
        <xs:annotation>
          <xs:documentation>Active</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="directDebitParameterScopeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="TECHNICAL">
        <xs:annotation>
          <xs:documentation>A DRC internal parameter.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="BRAND">
        <xs:annotation>
          <xs:documentation>A brand specific parameter.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="CUSTOMER">
        <xs:annotation>
          <xs:documentation>A customer specific parameter.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="customerParameters">
    <xs:sequence>
      <xs:element name="customerMonetaryParameter" type="directDebitMonetaryParameter" minOccurs="0">
        <xs:annotation>
          <xs:documentation>A list with customer specific parameters.
						Following parameters are currently supported for
						customer:
						• GENERAL_MONTHLY_MAX_AMOUNT.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="directDebitParameters">
    <xs:annotation>
      <xs:documentation>The list of the debit parameters for specified
				brand and tenant id.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="multibrandIds" type="base:multibrandIds">
        <xs:annotation>
          <xs:documentation>The list of the brand/tenant ids to which the
						given properties should be associated.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="unbounded" name="directDebitIntParameter" type="directDebitIntParameter">
        <xs:annotation>
          <xs:documentation>Specifies direct debit parameters with integer
						value.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="unbounded" name="directDebitMonetaryParameter" type="directDebitMonetaryParameter">
        <xs:annotation>
          <xs:documentation>Specifies direct debit parameters with monatery
						value.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="unbounded" name="chargeBackParameter" type="chargeBackParameter">
        <xs:annotation>
          <xs:documentation>Specifies charge back parameters to use during
						processing of return transactions.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="directDebitThresholdList" type="directDebitThresholdList">
        <xs:annotation>
          <xs:documentation>Specifies a list of threshold values allowed to
						use for given brand.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="monthlyValidationCycle">
        <xs:annotation>
          <xs:documentation>Specifies the type of the monthly validation
						cycle to use during eligibility check.</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="validationCycleTypeEnum">
            <xs:enumeration value="MONTHLY_FLEX_START_30_DAYS">
              <xs:annotation>
                <xs:documentation>Starts with the day of the first DD recharge
									and ends 30 days later.
									Example: 5.12.2015 – 4.01.2016</xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="MONTHLY_FIX_START_1">
              <xs:annotation>
                <xs:documentation>Start always at 1. day of current month 00:00,
									end of cycle is the last day of current month 12:00 pm</xs:documentation>
              </xs:annotation>
            </xs:enumeration>
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="directDebitIntParameter">
    <xs:annotation>
      <xs:documentation>The name/value pair of a debit parameter with an
				integer value.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="name">
        <xs:simpleType>
          <xs:annotation>
            <xs:documentation>The name of the direct debit parameter with an
							integer value.</xs:documentation>
          </xs:annotation>
          <xs:restriction base="directDebitParameterNameEnum">
            <xs:enumeration value="ON_DEMAND_TOPUP_LIMIT">
              <xs:annotation>
                <xs:documentation>Max number of on-demand topups per day</xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="LOW_BALANCE_THRESHOLD_TOPUP_LIMIT">
              <xs:annotation>
                <xs:documentation>Max number of threshold topups per day</xs:documentation>
              </xs:annotation>
            </xs:enumeration>
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="value" type="xs:int">
        <xs:annotation>
          <xs:documentation>The value of the direct debit parameter.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="directDebitMonetaryParameter">
    <xs:annotation>
      <xs:documentation>The name/value paar of a debit paramter with a
				monetary value.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="name">
        <xs:simpleType>
          <xs:annotation>
            <xs:documentation>The name of the direct debit parameter with a
							monetary value.</xs:documentation>
          </xs:annotation>
          <xs:restriction base="directDebitParameterNameEnum">
            <xs:enumeration value="GENERAL_DAILY_MAX_AMOUNT">
              <xs:annotation>
                <xs:documentation>The value of the max charge amount per day, in
									smallest currency unit, e.g. in cent for Euro</xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="GENERAL_MONTHLY_MAX_AMOUNT">
              <xs:annotation>
                <xs:documentation>The value of the max charge amount per month,
									in smallest currency unit, e.g. in cent for Euro</xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="FEE_FREED_CLAWBACK_AMOUNT">
              <xs:annotation>
                <xs:documentation>The max clawback amount to free from the fee.
									Example: If the value is 200 (EUROCENT) then for all RLS values
									below 2,01 EUR no fee will be applied, independent from the
									clawback category or RLS reason.</xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="MONTHLY_UNLIMITED_AMOUNT">
              <xs:annotation>
                <xs:documentation>This Parameter defines a monthly max amount
									that will be used for eligibility check if customer chooses
									UNLIMITED option, in smallest currency unit, e.g. in cent for
									Euro.</xs:documentation>
              </xs:annotation>
            </xs:enumeration>
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:choice>
        <xs:sequence>
          <xs:element name="value" type="base:amount">
            <xs:annotation>
              <xs:documentation>The amount in smallest currency unit, i.e. CENT for EUR.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="currency" type="base:currency" minOccurs="0">
            <xs:annotation>
              <xs:documentation>The currency of the amount. If not set EUR will be used.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:element name="UNLIMITED" type="base:UNLIMITED">
          <xs:annotation>
            <xs:documentation>Can be set for customer specific parameter only and says 
							that the customer itself does not want to limit with this parameter.</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:choice>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="directDebitThresholdList">
    <xs:annotation>
      <xs:documentation>A list of monetary values for threshold
				notifications.
				The delivered list will override the data saved in the
				DRC completely,
				but applied for new registrations only.
				For allready
				registered account DRC will still process notifications
				for threshold
				values that no more present in the list provided with
				the last
				updateDirectDebitParameter call.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="thresholdValue" type="base:monetaryValue" minOccurs="0" maxOccurs="5"/>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="validationCycleTypeEnum">
    <xs:annotation>
      <xs:documentation>The type of the validation cycle to use during
				eligibility check.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="DAILY_FIX_START_00">
        <xs:annotation>
          <xs:documentation>Start always at 00:00 am of current day, end of
						cycle is at 12:00 pm of the same day</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="MONTHLY_FLEX_START_30_DAYS">
        <xs:annotation>
          <xs:documentation>Starts with the day of the first DD recharge and
						ends 30 days later.
						Example: 5.12.2015 – 4.01.2016</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="MONTHLY_FIX_START_1">
        <xs:annotation>
          <xs:documentation>Start always at 1. day of current month 00:00,
						end of cycle is the last day of current month 12:00 pm</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="directDebitParameterNameEnum">
    <xs:annotation>
      <xs:documentation>The name of the direct debit parameter.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="GENERAL_DAILY_MAX_AMOUNT">
        <xs:annotation>
          <xs:documentation>The value of the max charge amount per day, in
						smallest currency unit, e.g. in cent for Euro.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="GENERAL_MONTHLY_MAX_AMOUNT">
        <xs:annotation>
          <xs:documentation>The value of the max charge amount per month
						after initial phase, in smallest currency unit, e.g. in cent for
						Euro.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="MONTHLY_UNLIMITED_AMOUNT">
        <xs:annotation>
          <xs:documentation>This Parameter defines a monthly max amount that
						will be used for eligibility check if customer chooses UNLIMITED
						option, in smallest currency unit, e.g. in cent for Euro.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ON_DEMAND_TOPUP_LIMIT">
        <xs:annotation>
          <xs:documentation>Max number of on-demand topups per day.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="LOW_BALANCE_THRESHOLD_TOPUP_LIMIT">
        <xs:annotation>
          <xs:documentation>Max number of threshold topups per day.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="CHARGE_BACK_INSUFFICIENT_BALANCE">
        <xs:annotation>
          <xs:documentation>Defines configuration for fees payable in case of
						a return bank transaction with insufficient balance.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="CHARGE_BACK_MANDATE_REVOKED">
        <xs:annotation>
          <xs:documentation>Defines configuration for fees payable in case of
						a return bank transaction with mandate revoked.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="CHARGE_BACK_AMBIGUOUS_BANK_DATA">
        <xs:annotation>
          <xs:documentation>Defines configuration for fees payable in case of
						a return bank transaction with ambiguous bank data.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="CHARGE_BACK_OBJECTION">
        <xs:annotation>
          <xs:documentation>Defines configuration for fees payable in case of
						a return bank transaction with objection.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="CHARGE_BACK_OTHER">
        <xs:annotation>
          <xs:documentation>Defines configuration for fees payable in case of
						a return bank transaction with other reason.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="FEE_FREED_CLAWBACK_AMOUNT">
        <xs:annotation>
          <xs:documentation>The max clawback amount to free from the fee.
						Example: If the value is 200 (EUROCENT) then for all RLS values
						below 2,01 EUR no fee will be applied, independent from the
						clawback category or RLS reason.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="chargeBackParameter">
    <xs:annotation>
      <xs:documentation>Contains list of claw back reasons and fee payable
				in case of a return
				payment with a reason from the list.
				If no fee
				should be payed, the amount of the fee must be set to 0.
				The fee
				value defined with the paremter CHARGE_BACK_OTHER will be used
				in
				case the reason code of a return payment is not found in any
				other
				parameter. Therefore the parameter CHARGE_BACK_OTHER must not
				contain the list of SEPA reason codes.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="name">
        <xs:simpleType>
          <xs:annotation>
            <xs:documentation>The name of the direct debit parameter with a
							value for return fee.</xs:documentation>
          </xs:annotation>
          <xs:restriction base="directDebitParameterNameEnum">
            <xs:enumeration value="CHARGE_BACK_INSUFFICIENT_BALANCE">
              <xs:annotation>
                <xs:documentation>Defines configuration for fees payable in case
									of a return bank transaction with insufficient balance</xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="CHARGE_BACK_MANDATE_REVOKED">
              <xs:annotation>
                <xs:documentation>Defines configuration for fees payable in case
									of a return bank transaction with mandate revoked</xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="CHARGE_BACK_AMBIGUOUS_BANK_DATA">
              <xs:annotation>
                <xs:documentation>Defines configuration for fees payable in case
									of a return bank transaction with ambiguous bank data</xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="CHARGE_BACK_OBJECTION">
              <xs:annotation>
                <xs:documentation>Defines configuration for fees payable in case
									of a return bank transaction with objection</xs:documentation>
              </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="CHARGE_BACK_OTHER">
              <xs:annotation>
                <xs:documentation>Defines configuration for fees payable in case
									of a return bank transaction with other reason</xs:documentation>
              </xs:annotation>
            </xs:enumeration>
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <xs:element name="SEPAReasonCodes" type="SEPAReasonCodes" minOccurs="0">
        <xs:annotation>
          <xs:documentation>The list of SEPA reason codes. Mandatory for all
						charge back types except CHARGE_BACK_OTHER.
						The CHARGE_BACK_OTHER
						option must not have the SEPA reason codes.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="fee" type="base:amount">
        <xs:annotation>
          <xs:documentation>The fee which is valid for that charge back
						category, i.e. CENT for EUR.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="currency" type="base:currency">
        <xs:annotation>
          <xs:documentation>The currency of the amount. If not set EUR will
						be used.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SEPAReasonCodes">
    <xs:annotation>
      <xs:documentation>The container for a list with SEPA return codes.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="SEPAReasonCode" type="SEPAReasonCode" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="SEPAReasonCode">
    <xs:annotation>
      <xs:documentation>The SEPA Reason Code (ISO), e.g. AC01, BE04.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:minLength value="1"/>
      <xs:maxLength value="4"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="registrationOptions">
    <xs:annotation>
      <xs:documentation>The list of direct debit options that should be
				supported for customer account.
				Following options are supported and
				can be active at the same time:
				PACKPAYMENT, ON_DEMAND (per SMS),
				THRESHOLD and/or MONTHLY.
				The option parameter can be overriden with
				an new registration request.
				If any option that was registered before
				is not contained in the
				provided option list, it will be removed:
				i.e. the list must allways
				contain all active options.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="registrationOptionOnDemandSms" type="registrationOptionOnDemandSms" minOccurs="0"/>
      <xs:element name="registrationOptionThreshold" type="registrationOptionThreshold" minOccurs="0"/>
      <xs:element name="registrationOptionMonthly" type="registrationOptionMonthly" minOccurs="0"/>
      <xs:element name="registrationOptionPack" type="registrationOptionPack" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="abstractRegistrationOption" abstract="true">
    <xs:sequence></xs:sequence>
  </xs:complexType>
  <xs:complexType name="registrationOptionOnDemandSms">
    <xs:complexContent>
      <xs:extension base="abstractRegistrationOption">
        <xs:sequence>
          <xs:element name="rechargeAmount" type="base:amount">
            <xs:annotation>
              <xs:documentation>The amount that will be used for charging in
								case of customer sms.
								This value is for information only, because
								the amount to charge
								will be allways provided with the
								chargeCustomer operation.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="currency" type="base:currency">
            <xs:annotation>
              <xs:documentation>The currency of the recharing amount. If not
								set EUR will be used.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="registrationOptionThreshold">
    <xs:complexContent>
      <xs:extension base="abstractRegistrationOption">
        <xs:sequence>
          <xs:element name="thresholdAmount" type="base:amount">
            <xs:annotation>
              <xs:documentation>The amount for the threshold limit.

								DRC will
								support up to 5 different limit values that has to be
								delivered
								by PPIT with direct debit parameter
								directDebitThresholdList
								(s.updateDirectDebitParameters
								operation).
								If for a threshold
								amount value provided with a registration
								request does not exist
								in this list, the registration request
								will fail with appropriate
								error code.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="rechargeAmount" type="base:amount">
            <xs:annotation>
              <xs:documentation>The amount for atomatically recharging.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="currency" type="base:currency">
            <xs:annotation>
              <xs:documentation>The currency of the recharging amount. If not
								set EUR will be used.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="registrationOptionMonthly">
    <xs:complexContent>
      <xs:extension base="abstractRegistrationOption">
        <xs:sequence>
          <xs:element name="rechargeDay" type="base:dayInMonth">
            <xs:annotation>
              <xs:documentation>The day on which the monthly recharge should
								take place.
								This value is used for information only, because the
								effective date
								of notification is managed by OCS.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="rechargeAmount" type="base:amount">
            <xs:annotation>
              <xs:documentation>The amount for atomatically recharging.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="currency" type="base:currency">
            <xs:annotation>
              <xs:documentation>The currency of the recharging amount. If not
								set EUR will be used.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="registrationOptionPack">
    <xs:complexContent>
      <xs:extension base="abstractRegistrationOption"></xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="limitInfoList">
    <xs:sequence>
      <xs:element name="limitInfo" type="limitInfo" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="limitInfo">
    <xs:annotation>
      <xs:documentation>Contains limit information collected during
				eligibility check within one validation cycle.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="limitResetDate" type="xs:date">
        <xs:annotation>
          <xs:documentation>The next date in calendar when the limit will be
						reset in DRC.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="validationCycleType" type="validationCycleTypeEnum">
        <xs:annotation>
          <xs:documentation>The validation cycle used for eligibility check.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:choice>
        <xs:element name="intLimit" type="intLimitInfo"/>
        <xs:element name="monetaryLimit" type="monetaryLimitInfo"/>
      </xs:choice>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="intLimitInfo">
    <xs:sequence>
      <xs:element name="intLimitParameter" type="directDebitIntParameter">
        <xs:annotation>
          <xs:documentation>An integer parameter used for limit check and
						remaining value for given parameter.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="parameterScope" type="directDebitParameterScopeEnum">
        <xs:annotation>
          <xs:documentation>Defines the scope of the parameter used during
						eligibility check, i.e.
						technical, customer or brand specific.
						Normally a customer scope is set if the used parameter value is
						derived
						from customer registration data, i.e. customer specific
						parameter
						was provided with registration request.
						If no customer
						parameter found in registration data, a brand
						specific parameter
						will be used.
						But if the value of the customer or brand specific
						parameter is
						greater as a technical one, the technical parameter
						will be used.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="remainingLimitAmount" type="xs:int">
        <xs:annotation>
          <xs:documentation>How much can still be recharged without exceeding
						the limit.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="monetaryLimitInfo">
    <xs:sequence>
      <xs:element name="monetaryLimitParameter" type="directDebitMonetaryParameter">
        <xs:annotation>
          <xs:documentation>A monetary parameter used for limit check and
						remaining amount for given parameter.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="parameterScope" type="directDebitParameterScopeEnum">
        <xs:annotation>
          <xs:documentation>Defines the scope of the parameter used during
						eligibility check, i.e.
						technical, customer or brand specific.
						Normally a customer scope is set if the used parameter value is
						derived
						from registration data, i.e. customer specific parameter
						was
						provided with registration request.
						If no customer parameter
						found in registration data a brand specific
						parameter will be used.
						But if the value of the customer or brand specific parameter is
						greater as a technical one, the technical parameter will be used.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="remainingLimitAmount" type="base:amount">
        <xs:annotation>
          <xs:documentation>How much can still be recharged without exceeding
						the limit.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="currency" type="base:currency">
        <xs:annotation>
          <xs:documentation>The currency of the amount. If not set EUR will
						be used.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="gpsTxId">
    <xs:annotation>
      <xs:documentation>The unique id of a transaction from GPS.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="[A-Za-z0-9.:-_]{1,12}"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="msisdnInUse">
    <xs:annotation>
      <xs:documentation>Contains external contract id of a subscription that already registered with the requested msisdn.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="externalContractId" type="externalContractId"/>
    </xs:sequence>
  </xs:complexType>
  <!--operation healthCheck-->
  <xs:element name="healthCheck">
    <xs:annotation>
      <xs:documentation>Health check request.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence/>
    </xs:complexType>
  </xs:element>
  <xs:element name="healthCheckResponse">
    <xs:annotation>
      <xs:documentation>Health check response.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence/>
    </xs:complexType>
  </xs:element>
  <!--operation chargeCustomer-->
  <xs:element name="chargeCustomer" type="chargeCustomer"/>
  <xs:complexType name="chargeCustomer">
    <xs:annotation>
      <xs:documentation>The data needed for charging.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="externalContractId" type="externalContractId">
        <xs:annotation>
          <xs:documentation>The external contract id of the customer in PPIT.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="amount" type="base:amount">
        <xs:annotation>
          <xs:documentation>The amount in the smallest currency unit, e.g. in
						cent for Euro.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="currency" type="base:currency">
        <xs:annotation>
          <xs:documentation>The 3 character ISO 4217 currency code of the
						amount. Currently is only ‘EUR’ possible.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="balanceType" type="base:balanceType">
        <xs:annotation>
          <xs:documentation>The balance type of the operation.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="referenceId" type="referenceId">
        <xs:annotation>
          <xs:documentation>The unique ID for operation assigned by PPIT,
						e.g.: abcde12345678.
						The reference id will be used for duplicate
						check.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="paymentDate" type="xs:dateTime">
        <xs:annotation>
          <xs:documentation>The date of the payment initialization.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="paymentUseCase" type="paymentUseCaseEnum">
        <xs:annotation>
          <xs:documentation>The reason of the charge operation.
						In case of
						initial charge the eligibility check will be deactivated,
						else
						always activated.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="pack" type="pack" minOccurs="0">
        <xs:annotation>
          <xs:documentation>The pack information must be provided for
						requests with paymentUseCase PACKPAYMENT only.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="gpsTxId" type="gpsTxId" minOccurs="0"></xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="chargeCustomerResponse" type="chargeCustomerResponse"/>
  <xs:complexType name="chargeCustomerResponse">
    <xs:annotation>
      <xs:documentation>The information about a charged operation.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="isDuplicate" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>True if the request with the same referenceId has
						been already successfully processed by DRC and the last result
						just delivered. Else false.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="correlationId" type="base:correlationId">
        <xs:annotation>
          <xs:documentation>The unique id of the request from DRC used to
						identify the transaction.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="opReference" type="base:opReference">
        <xs:annotation>
          <xs:documentation>The unique id of the request from OCS used to
						identify the transaction.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="gpsTxId" type="gpsTxId" minOccurs="0"></xs:element>
      <xs:element name="eligibilityCheckFailure" minOccurs="0">
        <xs:annotation>
          <xs:documentation>For PACKPAYMENT usecase only: the errors during
						eligibility check will be provided with the regular response and
						not as fault.
						Therefore the request will be anyway processed in
						case of any failures
						during elegibility check.
						Attention: the errors
						outside of the eligibility check will be notified with
						a soap fault
						as usual.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:choice>
            <xs:element name="limitExceededInfo" type="limitInfo">
              <xs:annotation>
                <xs:documentation>The information about limit parameter that has
									been exceeded.
									If more as one parameter exceeded only one with
									the longest reset
									date will be delivered, i.e. if a daily and a
									monthly limit
									exceeded the monthly one will be delivered.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="drcFaultInfo" type="base:drcFault">
              <xs:annotation>
                <xs:documentation>The information about an error occured during
									eligibility check because of any misconfiguration.</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:choice>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--operation registerForDirectDebit-->
  <xs:element name="registerForDirectDebit" type="registerForDirectDebit"/>
  <xs:complexType name="registerForDirectDebit">
    <xs:annotation>
      <xs:documentation>The data needed for registering.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="msisdn" type="base:msisdn" minOccurs="0">
        <xs:annotation>
          <xs:documentation>The MSISDN in E164 format whose owner has to be
						charged.
						This element is mandatory for the first registration call,
						i.e. in
						case no data with provided contractId exists in the DRC
						database.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="externalContractId" type="externalContractId">
        <xs:annotation>
          <xs:documentation>The external contract id of the customer in PPIT.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="multibrandId" type="base:multibrandId" minOccurs="0">
        <xs:annotation>
          <xs:documentation>The combination of brand and tenant ids of the
						provider appropriate for the account.
						This element is mandatory for
						first registration call, i.e. in case no
						data with provided
						contractId exists in the DRC database.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="bankData" type="bank:bankData">
        <xs:annotation>
          <xs:documentation>The bank data of the customer to use for
						changing.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="directDebitState" type="directDebitStateEnum">
        <xs:annotation>
          <xs:documentation>The direct debit state.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="registrationOptions" type="registrationOptions">
        <xs:annotation>
          <xs:documentation>A list of direct debit options those should be
						supported for customer account.
						If provided it must contain all
						active direct debit options. Options
						registered before but not
						contained in the list will be
						deactivated.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="customerParameters" type="customerParameters">
        <xs:annotation>
          <xs:documentation>The customer specific limit configuration.
						If provided the customer limit configuration will be changed, else
						no modifications occurs.
						In case of the limit configuration change DRC will do eligibility
						check and provide its result with the response.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="registerForDirectDebitResponse" type="registerForDirectDebitResponse"/>
  <xs:complexType name="registerForDirectDebitResponse">
    <xs:annotation>
      <xs:documentation>The response.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="isNewRegistration" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>True if the customer first registered by DRC,
						else false.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="recordId" type="xs:long">
        <xs:annotation>
          <xs:documentation>The id of the history record for given
						(re)registration.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="eligibilityCheckResult" type="limitInfoList" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Information with the result of the eligibility
						check.
						This information will be only delivered in case the
						'customerParameters' element was provided with the appropriate
						registerForDirectDebit request. In this case the limitInfoList
						will contain a limit information for all possible customer
						parameter, also if a parameter not changed or existed.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--operation deregisterForDirectDebit-->
  <xs:element name="deregisterForDirectDebit" type="deregisterForDirectDebit"/>
  <xs:complexType name="deregisterForDirectDebit">
    <xs:annotation>
      <xs:documentation>The data needed for deregistering.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="externalContractId" type="externalContractId">
        <xs:annotation>
          <xs:documentation>The subscription id from PPIT.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="deregisterForDirectDebitResponse" type="deregisterForDirectDebitResponse"/>
  <xs:complexType name="deregisterForDirectDebitResponse">
    <xs:annotation>
      <xs:documentation>The response.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="recordId" type="xs:long" minOccurs="0">
        <xs:annotation>
          <xs:documentation>The id of the history record for given
						deregistration.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--operation updateDirectDebitParameters-->
  <xs:element name="updateDirectDebitParameters" type="updateDirectDebitParameters"/>
  <xs:complexType name="updateDirectDebitParameters">
    <xs:annotation>
      <xs:documentation>The list of parameters to update.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="directDebitParameters" type="directDebitParameters" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>The list of parameters for given brand and tenant
						id.</xs:documentation>
        </xs:annotation>
        <xs:unique name="intParameterUniqueKey">
          <xs:selector xpath="directDebitIntParameter"/>
          <xs:field xpath="name"/>
        </xs:unique>
        <xs:unique name="monetaryParameterUniqueKey">
          <xs:selector xpath="directDebitMonetaryParameter"/>
          <xs:field xpath="name"/>
        </xs:unique>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="updateDirectDebitParametersResponse" type="updateDirectDebitParametersResponse"/>
  <xs:complexType name="updateDirectDebitParametersResponse">
    <xs:annotation>
      <xs:documentation>The response.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="recordId" type="xs:long">
        <xs:annotation>
          <xs:documentation>The id of the history record for given property
						update.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--operation registerSubscription-->
  <xs:element name="registerSubscription" type="registerSubscription"/>
  <xs:complexType name="registerSubscription">
    <xs:annotation>
      <xs:documentation>The data needed for registering.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="externalContractId" type="externalContractId">
        <xs:annotation>
          <xs:documentation>The external contract id of the customer in PPIT.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="accountId" type="base:accountId" minOccurs="0">
        <xs:annotation>
          <xs:documentation>This element is mandatory for the first registration call,
						i.e. in case no data with provided contractId exists in the DRC database.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="bankData" type="bank:bankData" minOccurs="0">
        <xs:annotation>
          <xs:documentation>The bank data for direct debit transactions.
						If provided, the bank data saved in DRC will be changed, else no modification occurs.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="ddStatus" type="bank:ddStatusEnum" minOccurs="0">
        <xs:annotation>
          <xs:documentation>The status of the direct debit payment method.
						If provided, the status saved in DRC will be changed, else no modification occurs.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="ccData" type="cc:ccData" minOccurs="0">
        <xs:annotation>
          <xs:documentation>The credit card data neede for credit card transactions.
						If provided, the credit card data saved in DRC will be changed, else no modification occurs.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="ccStatus" type="cc:ccStatusEnum" minOccurs="0">
        <xs:annotation>
          <xs:documentation>The status of the credit card payment method.
						If provided, the status saved in DRC will be changed, else no modification occurs.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="selectedPaymentMethod" type="paymentMethodEnum">
        <xs:annotation>
          <xs:documentation>The payment method to use for charging.
						If provided, the selected method will be changed in DRC, else no modification occurs.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="subscriptionStatus" type="subscriptionStatusEnum">
        <xs:annotation>
          <xs:documentation>The subsciption state.
						If provided, the subscription status will be changed in DRC, else no modification occurs.
						In case the status should be changed to ACTIVE, DRC will check current registration data for completeness. 
						If no charging is possible with current data, an fault will be thrown.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="registrationOptions" type="registrationOptions">
        <xs:annotation>
          <xs:documentation>A list of direct debit options those should be
						supported for customer account.
						If provided it must contain all
						active direct debit options. Options
						registered before but not
						contained in the list will be
						deactivated.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="customerParameters" type="customerParameters">
        <xs:annotation>
          <xs:documentation>The customer specific limit configuration.
						If provided the customer limit configuration will be changed, else
						no modifications occurs.
						In case of the limit configuration change DRC will do eligibilith
						check and provide its result with the response.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="registerSubscriptionResponse" type="registerSubscriptionResponse"/>
  <xs:complexType name="registerSubscriptionResponse">
    <xs:annotation>
      <xs:documentation>The response.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="isNewRegistration" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>True if the customer first registered by DRC,
						else false.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="recordId" type="xs:long">
        <xs:annotation>
          <xs:documentation>The id of the history record for given
						(re)registration.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="eligibilityCheckResult" type="limitInfoList" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Information with the result of the eligibility
						check.
						This information will be only delivered in case the
						'customerParameters' element was provided with the appropriate
						registerSubscription request. In this case the limitInfoList
						will contain a limit information for all possible customer
						parameter, also if a parameter not changed or existed.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--operation setSubscriptionStatus-->
  <xs:element name="setSubscriptionStatus" type="setSubscriptionStatus"/>
  <xs:complexType name="setSubscriptionStatus">
    <xs:annotation>
      <xs:documentation>The data needed for status change.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="externalContractId" type="externalContractId">
        <xs:annotation>
          <xs:documentation>The external contract id of the customer in PPIT.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="subscriptionStatus" type="subscriptionStatusEnum">
        <xs:annotation>
          <xs:documentation>The subscription state to set.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="setSubscriptionStatusResponse" type="setSubscriptionStatusResponse"/>
  <xs:complexType name="setSubscriptionStatusResponse">
    <xs:annotation>
      <xs:documentation>The response.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="recordId" type="xs:long">
        <xs:annotation>
          <xs:documentation>The id of the history record for given
						change.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--operation deleteSubscription-->
  <xs:element name="deleteSubscription" type="deleteSubscription"/>
  <xs:complexType name="deleteSubscription">
    <xs:annotation>
      <xs:documentation>The data needed for deletion.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="externalContractId" type="externalContractId">
        <xs:annotation>
          <xs:documentation>The external contract id of the customer in PPIT.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="deleteSubscriptionResponse" type="deleteSubscriptionResponse"/>
  <xs:complexType name="deleteSubscriptionResponse">
    <xs:annotation>
      <xs:documentation>The response.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="recordId" type="xs:long">
        <xs:annotation>
          <xs:documentation>The id of the history record for given
						(re)registration.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--operation deregisterForPaymentMethod-->
  <xs:element name="deregisterForPaymentMethod" type="deregisterForPaymentMethod"/>
  <xs:complexType name="deregisterForPaymentMethod">
    <xs:annotation>
      <xs:documentation>The data needed for deregistration.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="externalContractId" type="externalContractId">
        <xs:annotation>
          <xs:documentation>The external contract id of the customer in PPIT.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="paymentMethod" type="paymentMethodEnum">
        <xs:annotation>
          <xs:documentation>The payment method to deregister.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="deregisterForPaymentMethodResponse" type="deregisterForPaymentMethodResponse"/>
  <xs:complexType name="deregisterForPaymentMethodResponse">
    <xs:annotation>
      <xs:documentation>The response.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="recordId" type="xs:long">
        <xs:annotation>
          <xs:documentation>The id of the history record for given
						change.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--operation selectPaymentMethod-->
  <xs:element name="selectPaymentMethod" type="selectPaymentMethod"/>
  <xs:complexType name="selectPaymentMethod">
    <xs:annotation>
      <xs:documentation>The data needed for payment method selection.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="externalContractId" type="externalContractId">
        <xs:annotation>
          <xs:documentation>The external contract id of the customer in PPIT.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="paymentMethod" type="paymentMethodEnum">
        <xs:annotation>
          <xs:documentation>The payment method to set as selected.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="selectPaymentMethodResponse" type="selectPaymentMethodResponse"/>
  <xs:complexType name="selectPaymentMethodResponse">
    <xs:annotation>
      <xs:documentation>The response.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="recordId" type="xs:long">
        <xs:annotation>
          <xs:documentation>The id of the history record for given
						change.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <!--fault and error codes-->
  <xs:element name="drcFault" type="base:drcFault"/>
  <xs:element name="limitExceededFault" type="limitInfo">
    <xs:annotation>
      <xs:documentation>The information about limit parameter that has
				been
				exceeded.
				If more as one parameter exceeded the only one with
				the
				longest reset date will be delivered, i.e. if a daily and a
				monthly
				limit exceeded the monthly one will be delivered.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="msisdnInUseFault" type="msisdnInUse"></xs:element>
</xs:schema>]]></con:content>
      <con:type>http://www.w3.org/2001/XMLSchema</con:type>
    </con:part>
    <con:part>
      <con:url>file:\D:\Projects\Telefonica\DirectReCharge\drc-qa\soapUI-Pro\DRC_Release_21-3\WSDLs\DRC-CustomerChargingService\xsd\Base.xsd</con:url>
      <con:content><![CDATA[<xs:schema targetNamespace="http://directrecharge.o2.com/ws/evolutionservice/base/" attributeFormDefault="unqualified" elementFormDefault="unqualified" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://directrecharge.o2.com/ws/evolutionservice/base/">
  <xs:simpleType name="dayInMonth">
    <xs:annotation>
      <xs:documentation>The day in month.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:int">
      <xs:minInclusive value="1"/>
      <xs:maxInclusive value="31"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="multibrandId">
    <xs:annotation>
      <xs:documentation>The container for combination of brand and tenant ids.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="brandId" type="xs:int"/>
      <xs:element name="tenantId" type="xs:int"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="multibrandIds">
    <xs:annotation>
      <xs:documentation>The container for a list with brand and tenant ids.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="multibrandId" type="tns:multibrandId" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="correlationId">
    <xs:annotation>
      <xs:documentation>ID for financial tracking. Example: 5512345678</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="\d{9,15}"/>
      <!--the correlationId is always a numeric value string-->
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="opReference">
    <xs:annotation>
      <xs:documentation>The unique ID for operation assigned by OCS, e.g.: abcde12345678.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:minLength value="1"/>
      <xs:maxLength value="32"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="status">
    <xs:restriction base="xs:int"/>
  </xs:simpleType>
  <xs:simpleType name="currency">
    <xs:annotation>
      <xs:documentation>Currency in ISO4217-currency-code style.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="EUR">
        <xs:annotation>
          <xs:documentation>Euro curreny code</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="application">
    <xs:annotation>
      <xs:documentation>Application name of the client-system</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="\w*"/>
      <!--no special character like '%', '$', or '-' but '_' is valid-->
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="referenceId">
    <xs:annotation>
      <xs:documentation>An alpha numeric string (e.g. order ID). This referenceId must be unique (in 
				minimum last 365 days). Drc proposes a rising serial number.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <!--an alpha numeric string, with a max length of 32 characters-->
      <xs:minLength value="0"/>
      <xs:maxLength value="32"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="serviceProviderId">
    <xs:annotation>
      <xs:documentation>Service provider ID as SAS-Code.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:minLength value="0"/>
      <xs:maxLength value="16"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="amount">
    <xs:annotation>
      <xs:documentation>Amount in euro cent.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:int">
      <xs:totalDigits value="6" fixed="false"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="monetaryValue">
    <xs:sequence>
      <xs:element name="value" type="tns:amount">
        <xs:annotation>
          <xs:documentation>The amount in smallest currency unit, i.e. CENT for EUR.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="currency" type="tns:currency">
        <xs:annotation>
          <xs:documentation>The currency of the amount. If not set EUR will be used.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="UNLIMITED">
    <xs:annotation>
      <xs:documentation>Flag for unlimited value.</xs:documentation>
    </xs:annotation>
  </xs:complexType>
  <xs:simpleType name="voucherCode">
    <xs:annotation>
      <xs:documentation>Voucher code to be redeemed.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:minLength value="0"/>
      <xs:maxLength value="16"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="msisdn">
    <xs:annotation>
      <xs:documentation>Valid MSISDN. 
				DRC preference a msisdn-shape of: 4917612304567</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="\d{11,15}"/>
      <!--only digits, MSISDN like 0176/1234589 is not allowed-->
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="accountId">
    <xs:sequence>
      <xs:element name="msisdn" type="tns:msisdn">
        <xs:annotation>
          <xs:documentation>The MSISDN in E164 format whose owner has to be
						charged.
						This element is mandatory for the first registration call,
						i.e. in
						case no data with provided contractId exists in the DRC
						database.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="brandId" type="xs:int"/>
      <xs:element name="tenantId" type="xs:int"/>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="balanceType">
    <xs:annotation>
      <xs:documentation>All kind of valid balance types.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="1">
        <xs:annotation>
          <xs:documentation>Balance type for future use.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="2">
        <!--main balance-->
        <xs:annotation>
          <xs:documentation>Balance type indicates the default main-balance.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="3">
        <xs:annotation>
          <xs:documentation>Balance type indicates virtual balance.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="4">
        <xs:annotation>
          <xs:documentation>Balance type for future use.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="5">
        <xs:annotation>
          <xs:documentation>Balance type for future use.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="6">
        <xs:annotation>
          <xs:documentation>Balance type for future use.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="paymentUseCase">
    <xs:annotation>
      <xs:documentation>payment use case configuration</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:minLength value="1"/>
      <xs:maxLength value="50"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="originator">
    <xs:annotation>
      <xs:documentation>The originator describes where the fault occurs.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="DRC">
        <xs:annotation>
          <xs:documentation>Within the drc-core-server.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Piranha">
        <xs:annotation>
          <xs:documentation>Within the piranha database.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="OCS">
        <xs:annotation>
          <xs:documentation>Within the OCS.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="VOMS">
        <xs:annotation>
          <xs:documentation>Within the voucher managment system.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="drcFault">
    <xs:annotation>
      <xs:documentation>Fault contains different error informations.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="retryPossible" minOccurs="1" maxOccurs="1" type="xs:boolean" default="false">
        <xs:annotation>
          <xs:documentation>Describes if this fault is transient or permanent. 
						If the flag is TRUE, the client might retry the
        				request otherwise not.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="originator" minOccurs="1" maxOccurs="1" type="tns:originator">
        <xs:annotation>
          <xs:documentation>The originator describes where the fault occurs.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="originatorMessage" minOccurs="1" maxOccurs="1" type="xs:string">
        <xs:annotation>
          <xs:documentation>Original description of the error code.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="errorCode" minOccurs="1" maxOccurs="1" type="xs:int">
        <xs:annotation>
          <xs:documentation>Contains the originator error code.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="message" minOccurs="0" maxOccurs="1" type="xs:string">
        <xs:annotation>
          <xs:documentation>Text message which describes why this drc fault 
						occurs in the processing chain.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="correlationId" minOccurs="0" maxOccurs="1" type="tns:correlationId">
        <xs:annotation>
          <xs:documentation>
            <xs:annotation>
              <xs:documentation>ID for financial tracking.</xs:documentation>
            </xs:annotation>
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content>
      <con:type>http://www.w3.org/2001/XMLSchema</con:type>
    </con:part>
    <con:part>
      <con:url>file:\D:\Projects\Telefonica\DirectReCharge\drc-qa\soapUI-Pro\DRC_Release_21-3\WSDLs\DRC-CustomerChargingService\xsd\Bank.xsd</con:url>
      <con:content><![CDATA[<xs:schema targetNamespace="http://directrecharge.o2.com/ws/evolutionservice/bank/" attributeFormDefault="unqualified" elementFormDefault="unqualified" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://directrecharge.o2.com/ws/evolutionservice/bank/">
  <xs:simpleType name="iban">
    <xs:annotation>
      <xs:documentation>IBAN (International Bank Account Number)</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="bic">
    <xs:annotation>
      <xs:documentation>BIC (Business Identifier Code)</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="accountOwner">
    <xs:annotation>
      <xs:documentation>The owner of the account.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:minLength value="1"/>
      <xs:maxLength value="61"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="mandateId">
    <xs:annotation>
      <xs:documentation>The mandate id.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:maxLength value="24"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="mandateStatusEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="ACTIVE">
        <xs:annotation>
          <xs:documentation>Active</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="INACTIVE">
        <xs:annotation>
          <xs:documentation>Inactive.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="bankData">
    <xs:sequence>
      <xs:element name="iban" type="tns:iban">
        <xs:annotation>
          <xs:documentation>The IBAN of the customer bank to use for
						charging.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="bic" type="tns:bic">
        <xs:annotation>
          <xs:documentation>The BIC of the customer bank to use for
						charging.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="bankAccountOwner" type="tns:accountOwner">
        <xs:annotation>
          <xs:documentation>The owner of the bank account to use by
						charging.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="mandateId" type="tns:mandateId">
        <xs:annotation>
          <xs:documentation>The mandate id.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="mandateCreationDate" type="xs:dateTime">
        <xs:annotation>
          <xs:documentation>The mandate creation date.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="mandateStatus" type="tns:mandateStatusEnum">
        <xs:annotation>
          <xs:documentation>The mandate status.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" maxOccurs="1" name="ultimateDebtor" type="tns:accountOwner">
        <xs:annotation>
          <xs:documentation>The name of the ultimate debtor (= account owner) if the bank account is owned by a third party. 
					Must not be set if the contractor is also the bank account owner.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="ddStatusEnum">
    <xs:annotation>
      <xs:documentation>Payment method status values.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="INACTIVE">
        <xs:annotation>
          <xs:documentation>Inactive</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="WAITING_FOR_FIRST_DIRECT_DEBIT">
        <xs:annotation>
          <xs:documentation>Within this state DRC will wait for first direct
						debit recharge and keep this date for the calculation of the
						monthly amount during eligibility check later.
						Only one recharge is
						allowed in this status. Following calls will be rejected by DRC,
						so this status should be changed immediately after the fist call.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="INITIAL_RETENTION">
        <xs:annotation>
          <xs:documentation>Initial retention.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ACTIVE">
        <xs:annotation>
          <xs:documentation>Active</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>]]></con:content>
      <con:type>http://www.w3.org/2001/XMLSchema</con:type>
    </con:part>
    <con:part>
      <con:url>file:\D:\Projects\Telefonica\DirectReCharge\drc-qa\soapUI-Pro\DRC_Release_21-3\WSDLs\DRC-CustomerChargingService\xsd\CreditCard.xsd</con:url>
      <con:content><![CDATA[<xs:schema targetNamespace="http://directrecharge.o2.com/ws/evolutionservice/cc/" attributeFormDefault="unqualified" elementFormDefault="unqualified" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://directrecharge.o2.com/ws/evolutionservice/cc/" xmlns:base="http://directrecharge.o2.com/ws/evolutionservice/base/">
  <xs:import namespace="http://directrecharge.o2.com/ws/evolutionservice/base/" schemaLocation="Base.xsd"/>
  <xs:simpleType name="ccAliasId">
    <xs:annotation>
      <xs:documentation>The unique reference id of a credit card registered by GPS.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="[A-Za-z0-9.:-_]{1,50}"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="ccData">
    <xs:sequence>
      <xs:element name="ccAliasId" type="tns:ccAliasId">
        <xs:annotation>
          <xs:documentation>The alias ID (former card reference ID) of the registered credit card that can be used for further payments.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="ccStatusEnum">
    <xs:annotation>
      <xs:documentation>Payment method status values.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="INACTIVE">
        <xs:annotation>
          <xs:documentation>The payment method could not be used.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="INITIAL">
        <xs:annotation>
          <xs:documentation>The payment method expects an initial charge in context of customer authorization.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ACTIVE">
        <xs:annotation>
          <xs:documentation>The payment method can be used without any restrictions.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>]]></con:content>
      <con:type>http://www.w3.org/2001/XMLSchema</con:type>
    </con:part>
  </con:definitionCache>
  <con:endpoints>
    <con:endpoint>${#Project#drc-subscriptionManagementService-URL}</con:endpoint>
    <con:endpoint>${#TestSuite#DRC-subscriptionManagement-WSS-URL}</con:endpoint>
    <con:endpoint>http://127.0.0.1:8080/drc/ws/SubscriptionManagementService</con:endpoint>
    <con:endpoint>http://mucsgdp08.sg.de.pri.o2.com:8480/drc/ws/SubscriptionManagementService</con:endpoint>
  </con:endpoints>
  <con:environmentSpec>
    <con:entry environmentId="e385afea-1153-4d90-83b9-3b49a724f0ea">
      <con:authProfile>Inherit From Parent</con:authProfile>
    </con:entry>
  </con:environmentSpec>
</con:interface>
