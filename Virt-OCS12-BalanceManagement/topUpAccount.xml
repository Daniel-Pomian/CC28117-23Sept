<?xml version="1.0" encoding="UTF-8"?>
<con:mockOperation name="topUpAccount" id="f0a0fb51-47b9-4098-9514-c7a9a376dfbf" interface="BalanceManagementServiceSOAPBinding_v1_0" operation="topUpAccount" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="f0a0fb51-47b9-4098-9514-c7a9a376dfbffileName">topUpAccount</con:setting>
  </con:settings>
  <con:defaultResponse>Response-Default</con:defaultResponse>
  <con:dispatchStyle>SCRIPT</con:dispatchStyle>
  <con:dispatchConfig/>
  <con:dispatchPath><![CDATA[/*
 * This script read values from request and set in virt properties for response 
 * Date: 10.05.2016, development forward at 15.04.19
 * Autor: Michael Gordon
*/

String sDocumentation='''
Documentation for using OCS 12 mock service.

Mock service despatch soapFault service excepction response, if MSISDN in request is:
	- null, empty or not numeric
	- MSISDN < 1 or MSISDN > 15 signs 
	
Mock service despatch default response with values from request and default values from mocke service like current response below.
Default balance configured by mock is - ${#MockService#DEFAULT-balance}

To order custom soap fault response with expected values, MSISDN in request must be in format:

- MSISDN prefix must be:
	- for rechargeAccount exceptions	- ${#Project#MSISDN-Prefix-OCS10-rechargeAmount-CustomException}
	- for deductBalance exceptions	- ${#Project#MOCK-Prefix-OCS10-deductBalance-CustomException}

- Position 6:
	1 - for service exception with  errorType=PERMANENT
	2 - for service exception with  errorType=TEMPORARY
	3 - for client exception	with  errorType=PERMANENT
	x - for service exception default response
	
- Positions 7-14 = last 8 signs from expected error code in response
	Ex. MSISDN = 49111198800012 returns  <ns2:exceptionId>1098800012</ns2:exceptionId>

Example soap fault response for MSISDN above: 
  <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soap:Body>
      <soap:Fault>
         <faultcode>soap:Server</faultcode>
         <faultstring>Mock: OCS12-BalanceManagement-Service. Soap fault exception</faultstring>
         <detail>
            <ns2:serverException xmlns="http://www.w3.org/2000/09/xmldsig#" xmlns:ns2="http://www.telefonica.com/schemas/UNICA/SOAP/common/v2" xmlns:ns3="http://www.telefonica.com/schemas/UNICA/SOAP/altamiraProvision/v1/types" xmlns:ns4="http://www.telefonica.com/schemas/UNICA/SOAP/altamiraProvision/balanceManagement/v1/types" xmlns:ns5="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:ns6="http://schemas.xmlsoap.org/ws/2002/04/secext">
               <ns2:exceptionCategory>SVR</ns2:exceptionCategory>
               <ns2:exceptionId>1098800012</ns2:exceptionId>
               <ns2:text>Account in wrong status</ns2:text>
               <ns2:exceptionPersistence>PERMANENT</ns2:exceptionPersistence>
            </ns2:serverException>
         </detail>
      </soap:Fault>
   </soap:Body>
</soap:Envelope>

 End of documentation  
'''
// Set documentation in virt propertie. This documentation will be returned in default responses from all virt services and must describe behavior of all services.
context.mockService.setPropertyValue('Doc', sDocumentation)

// constants
 def sERRORCODE_PREFIX='10'
 // read default values from project properties
 def sMSISDNPrefixException = context.expand( '${#Project#MOCK-Prefix-OCS10-rechargeAccount-CustomException}' )
 def sMSISDNUnknown = context.expand( '${#Project#MSISDN_OCS_Unknown}')
 
 
  // from virt properties
 def iDEFAULTBalance = context.expand( '${#MockService#DEFAULT-balance}' ).toInteger() 
 def sErrorType_Default = context.expand( '${#MockService#DEFAULT-ErrorType}')
 def sErrorCode_Default=context.expand( '${#MockService#DEFAULT-ErrorCode}')
 def sErrorText_Default = context.expand( '${#MockService#DEFAULT-ErrorText}')

 // set virt properties for soap fault responses  
 context.mockService.setPropertyValue('Exception-ErrorType',sErrorType_Default)
 context.mockService.setPropertyValue('Exception-ErrorCode',sErrorCode_Default)
 context.mockService.setPropertyValue('Exception-ErrorText',sErrorText_Default)
  
 // read values from incommning request
 def holder = new com.eviware.soapui.support.XmlHolder( mockRequest.requestContent )
 def sMSISDN = holder.getNodeValue("declare namespace typ='http://www.telefonica.com/schemas/UNICA/SOAP/altamiraProvision/balanceManagement/v1/types'; declare namespace typ1='http://www.telefonica.com/schemas/UNICA/SOAP/altamiraProvision/v1/types'; //typ:topUpAccount[1]/typ1:subscriberId[1]/typ1:e164Number[1]")  
 def sAmount=holder.getNodeValue("declare namespace typ='http://www.telefonica.com/schemas/UNICA/SOAP/altamiraProvision/balanceManagement/v1/types'; declare namespace typ1='http://www.telefonica.com/schemas/UNICA/SOAP/altamiraProvision/v1/types'; //typ:topUpAccount[1]/typ1:topUpAmount[1]")   
 def sHeaderMsgId=holder.getNodeValue("declare namespace add='http://schemas.xmlsoap.org/ws/2004/08/addressing';//add:MessageID[1]")
 def sApplicationID=holder.getNodeValue("declare namespace typ='http://www.telefonica.com/schemas/UNICA/SOAP/altamiraProvision/balanceManagement/v1/types';declare namespace typ1='http://www.telefonica.com/schemas/UNICA/SOAP/altamiraProvision/v1/types';//typ:topUpAccount[1]/typ1:actionCommonInfo[1]/typ1:appInfo[1]/typ1:appId[1]")
 def sReference =holder.getNodeValue("declare namespace typ='http://www.telefonica.com/schemas/UNICA/SOAP/altamiraProvision/balanceManagement/v1/types';declare namespace typ1='http://www.telefonica.com/schemas/UNICA/SOAP/altamiraProvision/v1/types';//typ:topUpAccount[1]/typ1:actionCommonInfo[1]/typ1:appInfo[1]/typ1:reference[1]")
 def sUserCode=holder.getNodeValue("declare namespace typ='http://www.telefonica.com/schemas/UNICA/SOAP/altamiraProvision/balanceManagement/v1/types';declare namespace typ1='http://www.telefonica.com/schemas/UNICA/SOAP/altamiraProvision/v1/types';//typ:topUpAccount[1]/typ1:actionCommonInfo[1]/typ1:userCode[1]")
 def sCompleteTransact=holder.getNodeValue("declare namespace typ='http://www.telefonica.com/schemas/UNICA/SOAP/altamiraProvision/balanceManagement/v1/types';declare namespace typ1='http://www.telefonica.com/schemas/UNICA/SOAP/altamiraProvision/v1/types';//typ:topUpAccount[1]/typ1:completeTransact[1]")
 
 log.info('OCS12-BalanceManagement.topUpAccount: Return response for request with msisdn ' + sMSISDN)
  // log data from request in groovy-output from mock-gui for validations
 log.info('MessageID is: ' + sHeaderMsgId) 	 
 log.info('applicationId is: ' + sApplicationID)
 log.info('reference is: ' + sReference)
 log.info('amount is: ' + sAmount)
    
 // check msissdn
 if(sMSISDN==null || sMSISDN.length()<1 || sMSISDN.length()>15 || !sMSISDN.toString().isNumber() ){
	context.mockService.setPropertyValue('Exception-ErrorCode','5')
 	context.mockService.setPropertyValue('Exception-ErrorText','Incoherent parameters: MSISDN is missed, to short, to long or contains not allowed signs')
	return 'Response-soapFault-ServiceException'
 }
 
 // if msisd=constant msisdn unknown, return permanent errorcode=1000000001, it is default code
 if (sMSISDN.toString()==sMSISDNUnknown.toString()){
 	context.mockService.setPropertyValue('Exception-ErrorCode','1')
 	context.mockService.setPropertyValue('Exception-ErrorText','Unknown subscriberId')
 	return 'Response-soapFault-ServiceException'
 }

 // check input parameters from request
String sResultCode='5'
String sResultDesc='Incoherent parameters:-'
def lstMediaType = ['23','25','27','28','35','38','39','40','43','44','60','61','70','71']
def lstTopup=['M0','M1','M2','M3','M4','M5','M6']
// check: MessageId in soapHeader. Must be uuid and 36 signs long
if (sHeaderMsgId==null || sHeaderMsgId.length()<1 ||
	sHeaderMsgId.replace('urn:uuid:','').length()!=36)
	sResultDesc=sResultDesc + 'MessageID in soapHeader is missed or not uuid!'
// check applicationId. Must be D+mediaType. Ex. D35
else if (sApplicationID==null ||  sApplicationID.length()!=3 || 
	!lstMediaType.contains(sApplicationID[1..2]) || sApplicationID[0]!='D')
	sResultDesc=sResultDesc + 'applicationId in request is emtpy or contains not allowed value! Must be D + media type'
// check reference. Started with mediaType. Ex. 350000010006278
else if (sReference==null ||  sReference.length()<9 ||  sReference.length()>64 ||
	!lstMediaType.contains(sReference[0..1]))
	sResultDesc=sResultDesc + 'reference in request is emtpy, not 9 till 64 signs long or does not contain media type!'
// check userCode=SDT
else if (sUserCode==null || sUserCode!='SDT')
	sResultDesc=sResultDesc + 'userCode in request contains wrong value. Allowed is only SDT!'
// check wnegativeBalanceUsageFlag
else if (sCompleteTransact==null || sCompleteTransact!='Y')
	sResultDesc=sResultDesc + 'negativeBalanceUsageFlag in request contains wrong value. Allowed is only yes!'
// Two last signs in applicationId must be = first two signs in reference and in rechargeType
else if (sApplicationID[1..2]!=sReference[0..1])
	sResultDesc=sResultDesc + 'Media type in applicationId and reference from request is not identical!'
else	// all values in request are valid, clear error description.
	sResultDesc=''

// if error description is not empty, send error response with error-message
if(sResultDesc!=''){
	context.mockService.setPropertyValue('Exception-ErrorCode',sResultCode)
	context.mockService.setPropertyValue('Exception-ErrorText',sResultDesc)
	return 'Response-soapFault-ServiceException'  
}

  // convert balance change to integer
 def iBalanceChange=sAmount.toInteger()
  // set request values to virt properties
 context.mockService.setPropertyValue('topUpAccount-balanceChange',sAmount)
 // set balance to default balance + change balance
 context.mockService.setPropertyValue('topUpAccount-balance',(iDEFAULTBalance+iBalanceChange).toString())
 // make sure, soap fault response is not ordered
 if (sMSISDN.length()<14 || sMSISDN[0..4]!=sMSISDNPrefixException){
	 return 'Response-Default'
 }

 // create ordered soap fault exception
 // set error code, if response is soap fault
 context.mockService.setPropertyValue('Exception-ErrorCode',sERRORCODE_PREFIX+sMSISDN.substring(6))
 switch ( sMSISDN[5] ) {
    case '1':		// service exception, permanent    		
         	return 'Response-soapFault-ServiceException' 
    case '2':		// service exception, transient   
    		context.mockService.setPropertyValue('Exception-ErrorType','TEMPORARY')        	
          return 'Response-soapFault-ServiceException' 
    case '3':		// policy exception, transient        	
        	return 'Response-soapFault-PolicyException'   
    default:
        	return 'Response-soapFault-ServiceException' 
 }]]></con:dispatchPath>
  <con:dispatchXPath/>
  <con:routeScript/>
  <con:response name="Response-Default" id="cee65de6-0cba-4dec-849e-316eea03f6bf" httpResponseStatus="200" encoding="UTF-8" dataSource="">
    <con:settings/>
    <con:responseContent><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:add="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:typ="http://www.telefonica.com/schemas/UNICA/SOAP/altamiraProvision/balanceManagement/v1/types" xmlns:typ1="http://www.telefonica.com/schemas/UNICA/SOAP/altamiraProvision/v1/types">
   <soapenv:Header>
      <add:MessageID>urn:uuid:${#Project#GUID}</add:MessageID>
   </soapenv:Header>
   <soapenv:Body>
      <ns4:topUpAccountResponse xmlns="http://www.w3.org/2000/09/xmldsig#" xmlns:ns2="http://www.telefonica.com/schemas/UNICA/SOAP/common/v2" xmlns:ns3="http://www.telefonica.com/schemas/UNICA/SOAP/altamiraProvision/v1/types" xmlns:ns4="http://www.telefonica.com/schemas/UNICA/SOAP/altamiraProvision/balanceManagement/v1/types" xmlns:ns5="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:ns6="http://schemas.xmlsoap.org/ws/2002/04/secext">
         <ns3:result>
            <ns3:opReference>
               <ns3:opId>${#Project#GUID_Moved-}</ns3:opId>
            </ns3:opReference>
            <ns3:opExecutionDate>${#Project#Date_Future_Offset}</ns3:opExecutionDate>
            <ns3:opCost exponent="${#MockService#DEFAULT-exponent}">${#MockService#DEFAULT-opCost}</ns3:opCost>
            <ns3:balanceActivityInfo>
               <ns3:balance exponent="${#MockService#DEFAULT-exponent}">${#MockService#topUpAccount-balance}</ns3:balance>
               <ns3:walletInfoList>
                  <ns3:walletInfo>
                     <ns3:walletId>${#MockService#DEFAULT-walletId}</ns3:walletId>
                     <ns3:balance exponent="${#MockService#DEFAULT-exponent}">${#MockService#topUpAccount-balance}</ns3:balance>
                     <ns3:expirationDate>${#Project#Date_Future_Offset}</ns3:expirationDate>
                     <ns3:status>A</ns3:status>
                     <ns3:detailedInfo>
                        <ns3:balanceNotAccumulated exponent="${#MockService#DEFAULT-exponent}">0</ns3:balanceNotAccumulated>
                        <ns3:changedBalance exponent="${#MockService#DEFAULT-exponent}">${#MockService#topUpAccount-balanceChange}</ns3:changedBalance>
                     </ns3:detailedInfo>
                  </ns3:walletInfo>
               </ns3:walletInfoList>
               <ns3:negativeBalance exponent="${#MockService#DEFAULT-exponent}">0</ns3:negativeBalance>
               <ns3:negativeBalanceInfoList>
                  <ns3:negativeBalanceInfo>
                     <ns3:negativeBalanceId>1</ns3:negativeBalanceId>
                     <ns3:balance exponent="${#MockService#DEFAULT-exponent}">0</ns3:balance>
                  </ns3:negativeBalanceInfo>
               </ns3:negativeBalanceInfoList>
            </ns3:balanceActivityInfo>
         </ns3:result>
      </ns4:topUpAccountResponse>
   </soapenv:Body>
</soapenv:Envelope>]]></con:responseContent>
    <con:wsaConfig mustUnderstand="NONE" version="200508" action="topUpAccount"/>
  </con:response>
  <con:response name="Response-soapFault-ServiceException" id="d7a7ee0f-f770-4586-a6ae-3a667d9b1e89" httpResponseStatus="500" encoding="UTF-8" dataSource="">
    <con:settings/>
    <con:responseContent><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soap:Body>
      <soap:Fault>
         <faultcode>soap:Server</faultcode>
         <faultstring>${#MockService#faultString}</faultstring>
         <detail>
            <ns2:serverException xmlns="http://www.w3.org/2000/09/xmldsig#" xmlns:ns2="http://www.telefonica.com/schemas/UNICA/SOAP/common/v2" xmlns:ns3="http://www.telefonica.com/schemas/UNICA/SOAP/altamiraProvision/v1/types" xmlns:ns4="http://www.telefonica.com/schemas/UNICA/SOAP/altamiraProvision/balanceManagement/v1/types" xmlns:ns5="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:ns6="http://schemas.xmlsoap.org/ws/2002/04/secext">
               <ns2:exceptionCategory>SVR</ns2:exceptionCategory>
               <ns2:exceptionId>${#MockService#Exception-ErrorCode}</ns2:exceptionId>
               <ns2:text>${#MockService#Exception-ErrorText}</ns2:text>
               <ns2:exceptionPersistence>${#MockService#Exception-ErrorType}</ns2:exceptionPersistence>
            </ns2:serverException>
         </detail>
      </soap:Fault>
   </soap:Body>
</soap:Envelope>]]></con:responseContent>
    <con:wsaConfig mustUnderstand="NONE" version="200508" action="topUpAccount"/>
  </con:response>
  <con:response name="Response-soapFault-PolicyException" id="225edfec-7350-420a-96b0-7898998bc132" httpResponseStatus="500" encoding="UTF-8" dataSource="">
    <con:settings/>
    <con:responseContent><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soap:Body>
      <soap:Fault>
         <faultcode>soap:Server</faultcode>
         <faultstring>${#MockService#faultString}</faultstring>
         <detail>
            <tns:clientException xsi:schemaLocation="http://www.telefonica.com/schemas/UNICA/SOAP/common/v2 UNICA_API_SOAP_common_types_v2_1.xsd " xmlns:tns="http://www.telefonica.com/schemas/UNICA/SOAP/common/v2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               <tns:exceptionCategory>POL</tns:exceptionCategory>
               <tns:exceptionId>${#MockService#Exception-ErrorCode}</tns:exceptionId>
               <tns:text>${#MockService#Exception-ErrorText}</tns:text>
               <tns:variables>topUpAccount_POL_1</tns:variables>
               <tns:exceptionPersistence>${#MockService#DEFAULT-ErrorType}</tns:exceptionPersistence>
            </tns:clientException>
         </detail>
      </soap:Fault>
   </soap:Body>
</soap:Envelope>]]></con:responseContent>
    <con:wsaConfig mustUnderstand="NONE" version="200508" action="topUpAccount"/>
  </con:response>
</con:mockOperation>
